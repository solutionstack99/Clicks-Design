'use client';
'use client';
import { jsx } from "react/jsx-runtime";
import * as React from "react";
import { SimulatorManager, getDefaultSlices, getDefaultMessage, StateEventType } from "@prismicio/simulator/kit";
import { SliceSimulatorWrapper } from "./SliceSimulatorWrapper.js";
const simulatorManager = new SimulatorManager();
const SliceSimulator = ({ background, zIndex, className, ...restProps }) => {
  if (!("sliceZone" in restProps)) {
    throw new Error("A sliceZone prop must be provided when <SliceZone> is rendered in a Client Component. Add a sliceZone prop or convert your simulator to a Server Component with the getSlices helper.");
  }
  const [slices, setSlices] = React.useState(() => getDefaultSlices());
  const [message, setMessage] = React.useState(() => getDefaultMessage());
  React.useEffect(() => {
    simulatorManager.state.on(StateEventType.Slices, (_slices) => {
      setSlices(_slices);
    }, "simulator-slices");
    simulatorManager.state.on(StateEventType.Message, (_message) => {
      setMessage(_message);
    }, "simulator-message");
    simulatorManager.init();
    return () => {
      simulatorManager.state.off(StateEventType.Slices, "simulator-slices");
      simulatorManager.state.off(StateEventType.Message, "simulator-message");
    };
  }, []);
  const SliceZoneComp = restProps.sliceZone;
  return jsx(SliceSimulatorWrapper, { message, hasSlices: slices.length > 0, background, zIndex, className, children: jsx(SliceZoneComp, { slices }) });
};
export {
  SliceSimulator
};
//# sourceMappingURL=SliceSimulator.js.map
