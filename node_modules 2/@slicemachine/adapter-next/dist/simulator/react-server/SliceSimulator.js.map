{"version":3,"file":"SliceSimulator.js","sources":["../../../../src/simulator/react-server/SliceSimulator.tsx"],"sourcesContent":["// This `<SliceSimulator>` is only accessible from Server Components.\n\n\"use client\";\n\nimport * as React from \"react\";\n\nimport {\n\tSliceSimulatorProps as BaseSliceSimulatorProps,\n\tSimulatorManager,\n\tStateEventType,\n\tgetDefaultMessage,\n} from \"@prismicio/simulator/kit\";\nimport { compressToEncodedURIComponent } from \"lz-string\";\n\nimport { SliceSimulatorWrapper } from \"../SliceSimulatorWrapper\";\nimport { revalidatePath } from \"./actions\";\nimport { getSlices } from \"./getSlices\";\n\nconst STATE_PARAMS_KEY = \"state\";\n\nconst throttle =\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t<TArgs extends [...any]>(fn: (...args: TArgs) => unknown, wait: number) => {\n\t\tlet timeoutId: ReturnType<typeof setTimeout>;\n\t\tlet lastCallTime = 0;\n\n\t\treturn (...args: TArgs) => {\n\t\t\tclearTimeout(timeoutId);\n\n\t\t\tconst now = Date.now();\n\t\t\tconst timeSinceLastCall = now - lastCallTime;\n\t\t\tconst delayForNextCall = wait - timeSinceLastCall;\n\n\t\t\tif (delayForNextCall <= 0) {\n\t\t\t\tlastCallTime = now;\n\t\t\t\tfn(...args);\n\t\t\t} else {\n\t\t\t\ttimeoutId = setTimeout(() => {\n\t\t\t\t\tlastCallTime = Date.now();\n\t\t\t\t\tfn(...args);\n\t\t\t\t}, delayForNextCall);\n\t\t\t}\n\t\t};\n\t};\nconst throttledRevalidatePath = throttle(revalidatePath, 300);\n\nconst simulatorManager = new SimulatorManager();\n\nexport type SliceSimulatorProps = Omit<BaseSliceSimulatorProps, \"state\"> & {\n\tchildren: React.ReactNode;\n\tclassName?: string;\n};\n\nexport const SliceSimulator = ({\n\tchildren,\n\tbackground,\n\tzIndex,\n\tclassName,\n}: SliceSimulatorProps): JSX.Element => {\n\tconst [message, setMessage] = React.useState(() => getDefaultMessage());\n\n\tconst state =\n\t\ttypeof window !== \"undefined\"\n\t\t\t? new URL(window.location.href).searchParams.get(STATE_PARAMS_KEY)\n\t\t\t: undefined;\n\tconst hasSlices = getSlices(state).length > 0;\n\n\tReact.useEffect(() => {\n\t\tsimulatorManager.state.on(\n\t\t\tStateEventType.Slices,\n\t\t\t(newSlices) => {\n\t\t\t\tconst url = new URL(window.location.href);\n\t\t\t\turl.searchParams.set(\n\t\t\t\t\tSTATE_PARAMS_KEY,\n\t\t\t\t\tcompressToEncodedURIComponent(JSON.stringify(newSlices)),\n\t\t\t\t);\n\t\t\t\twindow.history.pushState(null, \"\", url);\n\n\t\t\t\t// A 0 ms timeout is needed to prevent a bug\n\t\t\t\t// where the path is revalidated before the URL\n\t\t\t\t// is updated with the new state.\n\t\t\t\tconst path = window.location.pathname;\n\t\t\t\tsetTimeout(() => throttledRevalidatePath(path), 0);\n\t\t\t},\n\t\t\t\"simulator-slices\",\n\t\t);\n\t\tsimulatorManager.state.on(\n\t\t\tStateEventType.Message,\n\t\t\t(newMessage) => setMessage(newMessage),\n\t\t\t\"simulator-message\",\n\t\t);\n\n\t\tsimulatorManager.init();\n\n\t\treturn () => {\n\t\t\tsimulatorManager.state.off(StateEventType.Slices, \"simulator-slices\");\n\n\t\t\tsimulatorManager.state.off(StateEventType.Message, \"simulator-message\");\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<SliceSimulatorWrapper\n\t\t\tmessage={message}\n\t\t\thasSlices={hasSlices}\n\t\t\tbackground={background}\n\t\t\tzIndex={zIndex}\n\t\t\tclassName={className}\n\t\t>\n\t\t\t{children}\n\t\t</SliceSimulatorWrapper>\n\t);\n};\n"],"names":[],"mappings":";;;;;;;;;AAkBA;AAEA;AAAM;AAAA;AAGA;AACJ;AAEA;AACC;AAEM;AACN;AACA;AAEA;AACgB;AACf;AAAU;AAEV;AACC;AACA;AAAU;AACQ;AACnB;AAAA;AAEH;AACD;AAEA;AAOO;AAMA;AAEN;AAIA;AAEA;AACC;AAGE;AACI;AAIJ;AAKM;AACN;AAAiD;AAIlC;AAMjB;AAEA;AACC;AAEA;AAAsE;AAAA;AAKvE;AAUF;;;;"}