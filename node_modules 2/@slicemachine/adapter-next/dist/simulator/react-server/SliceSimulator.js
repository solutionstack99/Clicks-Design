'use client';
'use client';
import { jsx } from "react/jsx-runtime";
import * as React from "react";
import { SimulatorManager, getDefaultMessage, StateEventType } from "@prismicio/simulator/kit";
import { compressToEncodedURIComponent } from "lz-string";
import { SliceSimulatorWrapper } from "../SliceSimulatorWrapper.js";
import { revalidatePath } from "./actions.js";
import { getSlices } from "./getSlices.js";
const STATE_PARAMS_KEY = "state";
const throttle = (
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  (fn, wait) => {
    let timeoutId;
    let lastCallTime = 0;
    return (...args) => {
      clearTimeout(timeoutId);
      const now = Date.now();
      const timeSinceLastCall = now - lastCallTime;
      const delayForNextCall = wait - timeSinceLastCall;
      if (delayForNextCall <= 0) {
        lastCallTime = now;
        fn(...args);
      } else {
        timeoutId = setTimeout(() => {
          lastCallTime = Date.now();
          fn(...args);
        }, delayForNextCall);
      }
    };
  }
);
const throttledRevalidatePath = throttle(revalidatePath, 300);
const simulatorManager = new SimulatorManager();
const SliceSimulator = ({ children, background, zIndex, className }) => {
  const [message, setMessage] = React.useState(() => getDefaultMessage());
  const state = typeof window !== "undefined" ? new URL(window.location.href).searchParams.get(STATE_PARAMS_KEY) : void 0;
  const hasSlices = getSlices(state).length > 0;
  React.useEffect(() => {
    simulatorManager.state.on(StateEventType.Slices, (newSlices) => {
      const url = new URL(window.location.href);
      url.searchParams.set(STATE_PARAMS_KEY, compressToEncodedURIComponent(JSON.stringify(newSlices)));
      window.history.pushState(null, "", url);
      const path = window.location.pathname;
      setTimeout(() => throttledRevalidatePath(path), 0);
    }, "simulator-slices");
    simulatorManager.state.on(StateEventType.Message, (newMessage) => setMessage(newMessage), "simulator-message");
    simulatorManager.init();
    return () => {
      simulatorManager.state.off(StateEventType.Slices, "simulator-slices");
      simulatorManager.state.off(StateEventType.Message, "simulator-message");
    };
  }, []);
  return jsx(SliceSimulatorWrapper, { message, hasSlices, background, zIndex, className, children });
};
export {
  SliceSimulator
};
//# sourceMappingURL=SliceSimulator.js.map
