"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const commonTags = require("common-tags");
const dotPath = (...segments) => {
  return segments.flat().join(".");
};
const format = async (input, helpers) => {
  const formattedInput = await helpers.format(input, void 0, {
    includeNewlineAtEnd: false,
    prettier: {
      parser: "typescript",
      printWidth: 60
    }
  });
  return formattedInput.endsWith(";") ? formattedInput.substring(0, formattedInput.length - 1) : formattedInput;
};
const snippetRead = async (data, { helpers }) => {
  const { fieldPath } = data;
  const label = "React";
  switch (data.model.type) {
    case "StructuredText": {
      return [
        {
          label: `${label} (components)`,
          language: "tsx",
          code: await format(commonTags.stripIndent`
							<PrismicRichText field={${dotPath(fieldPath)}} />
						`, helpers)
        },
        {
          label: `${label} (plain text)`,
          language: "tsx",
          code: await format(commonTags.stripIndent`
							<PrismicText field={${dotPath(fieldPath)}} />
						`, helpers)
        }
      ];
    }
    case "Link": {
      return {
        label,
        language: "tsx",
        code: await format(commonTags.stripIndent`
						<PrismicNextLink field={${dotPath(fieldPath)}}>Link</PrismicNextLink>
					`, helpers)
      };
    }
    case "Image": {
      return {
        label,
        language: "tsx",
        code: await format(commonTags.stripIndent`
							<PrismicNextImage field={${dotPath(fieldPath)}} />
						`, helpers)
      };
    }
    case "Group": {
      const code = await format(commonTags.stripIndent`
					<>
						{${dotPath(fieldPath)}.map((item) => {
							// Render the item
						})}
					</>
				`, helpers);
      return {
        label,
        language: "tsx",
        code
      };
    }
    case "Slices": {
      const code = await format(commonTags.stripIndent`
					<SliceZone
					  slices={${dotPath(fieldPath)}}
					  components={components}
					/>
				`, helpers);
      return {
        label,
        language: "tsx",
        code
      };
    }
    case "GeoPoint": {
      const code = await format(commonTags.stripIndent`
					<>{${dotPath(fieldPath, "latitude")}}, {${dotPath(fieldPath, "longitude")}}</>
				`, helpers);
      return {
        label,
        language: "tsx",
        code
      };
    }
    case "Embed": {
      const code = await format(commonTags.stripIndent`
					<div dangerouslySetInnerHTML={{ __html: ${dotPath(fieldPath, "html")} }} />
				`, helpers);
      return {
        label,
        language: "tsx",
        code
      };
    }
    default: {
      return {
        label,
        language: "tsx",
        code: await format(commonTags.stripIndent`
						<>{${dotPath(fieldPath)}}</>
					`, helpers)
      };
    }
  }
};
exports.snippetRead = snippetRead;
//# sourceMappingURL=snippet-read.cjs.map
