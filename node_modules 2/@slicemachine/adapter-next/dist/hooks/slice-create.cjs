"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const fs = require("@slicemachine/plugin-kit/fs");
const commonTags = require("common-tags");
const checkIsTypeScriptProject = require("../lib/checkIsTypeScriptProject.cjs");
const getJSFileExtension = require("../lib/getJSFileExtension.cjs");
const pascalCase = require("../lib/pascalCase.cjs");
const rejectIfNecessary = require("../lib/rejectIfNecessary.cjs");
const upsertSliceLibraryIndexFile = require("../lib/upsertSliceLibraryIndexFile.cjs");
const createComponentFile = async ({ data, helpers, actions, options }) => {
  const extension = await getJSFileExtension.getJSFileExtension({ helpers, options, jsx: true });
  const filename = `index.${extension}`;
  const pascalName = pascalCase.pascalCase(data.model.name);
  let contents;
  const isTypeScriptProject = await checkIsTypeScriptProject.checkIsTypeScriptProject({
    helpers,
    options
  });
  if (data.componentContents) {
    contents = data.componentContents;
  } else if (isTypeScriptProject) {
    contents = commonTags.stripIndent`
			import { Content } from "@prismicio/client";
			import { SliceComponentProps } from "@prismicio/react";

			/**
			 * Props for \`${pascalName}\`.
			 */
			export type ${pascalName}Props = SliceComponentProps<Content.${pascalName}Slice>;

			/**
			 * Component for "${data.model.name}" Slices.
			 */
			const ${pascalName} = ({ slice }: ${pascalName}Props): JSX.Element => {
				return (
					<section
						data-slice-type={slice.slice_type}
						data-slice-variation={slice.variation}
					>
						Placeholder component for ${data.model.id} (variation: {slice.variation}) Slices
					</section>
				);
			};

			export default ${pascalName}
		`;
  } else {
    contents = commonTags.stripIndent`
			/**
			 * @typedef {import("@prismicio/client").Content.${pascalName}Slice} ${pascalName}Slice
			 * @typedef {import("@prismicio/react").SliceComponentProps<${pascalName}Slice>} ${pascalName}Props
			 * @param {${pascalName}Props}
			 */
			const ${pascalName} = ({ slice }) => {
				return (
					<section
						data-slice-type={slice.slice_type}
						data-slice-variation={slice.variation}
					>
						Placeholder component for ${data.model.id} (variation: {slice.variation}) Slices
					</section>
				);
			};

			export default ${pascalName};
		`;
  }
  await fs.writeSliceFile({
    libraryID: data.libraryID,
    model: data.model,
    filename,
    contents,
    format: options.format,
    actions,
    helpers
  });
};
const sliceCreate = async (data, context) => {
  rejectIfNecessary.rejectIfNecessary(await Promise.allSettled([
    fs.writeSliceModel({
      libraryID: data.libraryID,
      model: data.model,
      format: context.options.format,
      helpers: context.helpers
    }),
    createComponentFile({ data, ...context })
  ]));
  rejectIfNecessary.rejectIfNecessary(await Promise.allSettled([
    upsertSliceLibraryIndexFile.upsertSliceLibraryIndexFile({
      libraryID: data.libraryID,
      ...context
    }),
    fs.upsertGlobalTypeScriptTypes({
      filename: context.options.generatedTypesFilePath,
      format: context.options.format,
      helpers: context.helpers,
      actions: context.actions
    })
  ]));
};
exports.sliceCreate = sliceCreate;
//# sourceMappingURL=slice-create.cjs.map
