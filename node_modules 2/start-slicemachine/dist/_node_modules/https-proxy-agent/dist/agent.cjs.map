{"version":3,"file":"agent.cjs","sources":["../../../../../../node_modules/https-proxy-agent/dist/agent.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst net_1 = __importDefault(require(\"net\"));\nconst tls_1 = __importDefault(require(\"tls\"));\nconst url_1 = __importDefault(require(\"url\"));\nconst assert_1 = __importDefault(require(\"assert\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst agent_base_1 = require(\"agent-base\");\nconst parse_proxy_response_1 = __importDefault(require(\"./parse-proxy-response\"));\nconst debug = debug_1.default('https-proxy-agent:agent');\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n *\n * @api public\n */\nclass HttpsProxyAgent extends agent_base_1.Agent {\n    constructor(_opts) {\n        let opts;\n        if (typeof _opts === 'string') {\n            opts = url_1.default.parse(_opts);\n        }\n        else {\n            opts = _opts;\n        }\n        if (!opts) {\n            throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');\n        }\n        debug('creating new HttpsProxyAgent instance: %o', opts);\n        super(opts);\n        const proxy = Object.assign({}, opts);\n        // If `true`, then connect to the proxy server over TLS.\n        // Defaults to `false`.\n        this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol);\n        // Prefer `hostname` over `host`, and set the `port` if needed.\n        proxy.host = proxy.hostname || proxy.host;\n        if (typeof proxy.port === 'string') {\n            proxy.port = parseInt(proxy.port, 10);\n        }\n        if (!proxy.port && proxy.host) {\n            proxy.port = this.secureProxy ? 443 : 80;\n        }\n        // ALPN is supported by Node.js >= v5.\n        // attempt to negotiate http/1.1 for proxy servers that support http/2\n        if (this.secureProxy && !('ALPNProtocols' in proxy)) {\n            proxy.ALPNProtocols = ['http 1.1'];\n        }\n        if (proxy.host && proxy.path) {\n            // If both a `host` and `path` are specified then it's most likely\n            // the result of a `url.parse()` call... we need to remove the\n            // `path` portion so that `net.connect()` doesn't attempt to open\n            // that as a Unix socket file.\n            delete proxy.path;\n            delete proxy.pathname;\n        }\n        this.proxy = proxy;\n    }\n    /**\n     * Called when the node-core HTTP client library is creating a\n     * new HTTP request.\n     *\n     * @api protected\n     */\n    callback(req, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { proxy, secureProxy } = this;\n            // Create a socket connection to the proxy server.\n            let socket;\n            if (secureProxy) {\n                debug('Creating `tls.Socket`: %o', proxy);\n                socket = tls_1.default.connect(proxy);\n            }\n            else {\n                debug('Creating `net.Socket`: %o', proxy);\n                socket = net_1.default.connect(proxy);\n            }\n            const headers = Object.assign({}, proxy.headers);\n            const hostname = `${opts.host}:${opts.port}`;\n            let payload = `CONNECT ${hostname} HTTP/1.1\\r\\n`;\n            // Inject the `Proxy-Authorization` header if necessary.\n            if (proxy.auth) {\n                headers['Proxy-Authorization'] = `Basic ${Buffer.from(proxy.auth).toString('base64')}`;\n            }\n            // The `Host` header should only include the port\n            // number when it is not the default port.\n            let { host, port, secureEndpoint } = opts;\n            if (!isDefaultPort(port, secureEndpoint)) {\n                host += `:${port}`;\n            }\n            headers.Host = host;\n            headers.Connection = 'close';\n            for (const name of Object.keys(headers)) {\n                payload += `${name}: ${headers[name]}\\r\\n`;\n            }\n            const proxyResponsePromise = parse_proxy_response_1.default(socket);\n            socket.write(`${payload}\\r\\n`);\n            const { statusCode, buffered } = yield proxyResponsePromise;\n            if (statusCode === 200) {\n                req.once('socket', resume);\n                if (opts.secureEndpoint) {\n                    // The proxy is connecting to a TLS server, so upgrade\n                    // this socket connection to a TLS connection.\n                    debug('Upgrading socket connection to TLS');\n                    const servername = opts.servername || opts.host;\n                    return tls_1.default.connect(Object.assign(Object.assign({}, omit(opts, 'host', 'hostname', 'path', 'port')), { socket,\n                        servername }));\n                }\n                return socket;\n            }\n            // Some other status code that's not 200... need to re-play the HTTP\n            // header \"data\" events onto the socket once the HTTP machinery is\n            // attached so that the node core `http` can parse and handle the\n            // error status code.\n            // Close the original socket, and a new \"fake\" socket is returned\n            // instead, so that the proxy doesn't get the HTTP request\n            // written to it (which may contain `Authorization` headers or other\n            // sensitive data).\n            //\n            // See: https://hackerone.com/reports/541502\n            socket.destroy();\n            const fakeSocket = new net_1.default.Socket({ writable: false });\n            fakeSocket.readable = true;\n            // Need to wait for the \"socket\" event to re-play the \"data\" events.\n            req.once('socket', (s) => {\n                debug('replaying proxy buffer for failed request');\n                assert_1.default(s.listenerCount('data') > 0);\n                // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n                // this point the HTTP module machinery has been hooked up for\n                // the user.\n                s.push(buffered);\n                s.push(null);\n            });\n            return fakeSocket;\n        });\n    }\n}\nexports.default = HttpsProxyAgent;\nfunction resume(socket) {\n    socket.resume();\n}\nfunction isDefaultPort(port, secure) {\n    return Boolean((!secure && port === 80) || (secure && port === 443));\n}\nfunction isHTTPS(protocol) {\n    return typeof protocol === 'string' ? /^https:?$/i.test(protocol) : false;\n}\nfunction omit(obj, ...keys) {\n    const ret = {};\n    let key;\n    for (key in obj) {\n        if (!keys.includes(key)) {\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n}\n//# sourceMappingURL=agent.js.map"],"names":["this","agent","require$$4","require$$5","require$$6"],"mappings":"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","x_google_ignoreList":[0]}