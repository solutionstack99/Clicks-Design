{"version":3,"file":"functiontostring.cjs","sources":["../../../../../../../../../../../node_modules/@sentry/node/node_modules/@sentry/core/esm/integrations/functiontostring.js"],"sourcesContent":["import { getOriginalFunction } from '@sentry/utils';\n\nlet originalFunctionToString;\n\n/** Patch toString calls to return proper name for wrapped functions */\nclass FunctionToString  {\n  /**\n   * @inheritDoc\n   */\n   static __initStatic() {this.id = 'FunctionToString';}\n\n  /**\n   * @inheritDoc\n   */\n\n   constructor() {\n    this.name = FunctionToString.id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setupOnce() {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // intrinsics (like Function.prototype) might be immutable in some environments\n    // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      Function.prototype.toString = function ( ...args) {\n        const context = getOriginalFunction(this) || this;\n        return originalFunctionToString.apply(context, args);\n      };\n    } catch (e) {\n      // ignore errors here, just don't patch this\n    }\n  }\n} FunctionToString.__initStatic();\n\nexport { FunctionToString };\n//# sourceMappingURL=functiontostring.js.map\n"],"names":["getOriginalFunction"],"mappings":";;;AAEA,IAAI;AAGJ,MAAM,iBAAkB;AAAA;AAAA;AAAA;AAAA,EAIrB,OAAO,eAAe;AAAC,SAAK,KAAK;AAAA,EAAmB;AAAA;AAAA;AAAA;AAAA,EAMpD,cAAc;AACb,SAAK,OAAO,iBAAiB;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY;AAEX,+BAA2B,SAAS,UAAU;AAI9C,QAAI;AAEF,eAAS,UAAU,WAAW,YAAc,MAAM;AAChD,cAAM,UAAUA,OAAAA,oBAAoB,IAAI,KAAK;AAC7C,eAAO,yBAAyB,MAAM,SAAS,IAAI;AAAA,MAC3D;AAAA,IACK,SAAQ,GAAP;AAAA,IAED;AAAA,EACF;AACH;AAAE,iBAAiB,aAAc;;","x_google_ignoreList":[0]}