{"version":3,"file":"dynamicSamplingContext.js","sources":["../../../../../../../../../../../node_modules/@sentry/node/node_modules/@sentry/core/esm/tracing/dynamicSamplingContext.js"],"sourcesContent":["import { dropUndefinedKeys } from '@sentry/utils';\nimport { DEFAULT_ENVIRONMENT } from '../constants.js';\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatchs the `createDsc` lifecycle hook as a side effect.\n */\nfunction getDynamicSamplingContextFromClient(\n  trace_id,\n  client,\n  scope,\n) {\n  const options = client.getOptions();\n\n  const { publicKey: public_key } = client.getDsn() || {};\n  const { segment: user_segment } = (scope && scope.getUser()) || {};\n\n  const dsc = dropUndefinedKeys({\n    environment: options.environment || DEFAULT_ENVIRONMENT,\n    release: options.release,\n    user_segment,\n    public_key,\n    trace_id,\n  }) ;\n\n  client.emit && client.emit('createDsc', dsc);\n\n  return dsc;\n}\n\nexport { getDynamicSamplingContextFromClient };\n//# sourceMappingURL=dynamicSamplingContext.js.map\n"],"names":[],"mappings":";;AAQA,SAAS,oCACP,UACA,QACA,OACA;AACA,QAAM,UAAU,OAAO;AAEvB,QAAM,EAAE,WAAW,WAAU,IAAK,OAAO,OAAQ,KAAI;AACrD,QAAM,EAAE,SAAS,iBAAkB,SAAS,MAAM,QAAS,KAAK;AAEhE,QAAM,MAAM,kBAAkB;AAAA,IAC5B,aAAa,QAAQ,eAAe;AAAA,IACpC,SAAS,QAAQ;AAAA,IACjB;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAG;AAED,SAAO,QAAQ,OAAO,KAAK,aAAa,GAAG;AAE3C,SAAO;AACT;","x_google_ignoreList":[0]}