{"version":3,"file":"transaction.cjs","sources":["../../../../../../../../../../../node_modules/@sentry/node/node_modules/@sentry/core/esm/tracing/transaction.js"],"sourcesContent":["import { logger, dropUndefinedKeys } from '@sentry/utils';\nimport { getCurrentHub } from '../hub.js';\nimport { getDynamicSamplingContextFromClient } from './dynamicSamplingContext.js';\nimport { Span, SpanRecorder } from './span.js';\n\n/** JSDoc */\nclass Transaction extends Span  {\n\n  /**\n   * The reference to the current hub.\n   */\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n   constructor(transactionContext, hub) {\n    super(transactionContext);\n    // We need to delete description since it's set by the Span class constructor\n    // but not needed for transactions.\n    delete this.description;\n\n    this._measurements = {};\n    this._contexts = {};\n\n    this._hub = hub || getCurrentHub();\n\n    this._name = transactionContext.name || '';\n\n    this.metadata = {\n      source: 'custom',\n      ...transactionContext.metadata,\n      spanMetadata: {},\n    };\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    this.transaction = this;\n\n    // If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means\n    // there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)\n    const incomingDynamicSamplingContext = this.metadata.dynamicSamplingContext;\n    if (incomingDynamicSamplingContext) {\n      // We shallow copy this in case anything writes to the original reference of the passed in `dynamicSamplingContext`\n      this._frozenDynamicSamplingContext = { ...incomingDynamicSamplingContext };\n    }\n  }\n\n  /** Getter for `name` property */\n   get name() {\n    return this._name;\n  }\n\n  /** Setter for `name` property, which also sets `source` as custom */\n   set name(newName) {\n    this.setName(newName);\n  }\n\n  /**\n   * JSDoc\n   */\n   setName(name, source = 'custom') {\n    this._name = name;\n    this.metadata.source = source;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n   initSpanRecorder(maxlen = 1000) {\n    if (!this.spanRecorder) {\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setContext(key, context) {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setMeasurement(name, value, unit = '') {\n    this._measurements[name] = { value, unit };\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setMetadata(newMetadata) {\n    this.metadata = { ...this.metadata, ...newMetadata };\n  }\n\n  /**\n   * @inheritDoc\n   */\n   finish(endTimestamp) {\n    // This transaction is already finished, so we should not flush it again.\n    if (this.endTimestamp !== undefined) {\n      return undefined;\n    }\n\n    if (!this.name) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this.name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.finish(endTimestamp);\n\n    const client = this._hub.getClient();\n    if (client && client.emit) {\n      client.emit('finishTransaction', this);\n    }\n\n    if (this.sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n\n      if (client) {\n        client.recordDroppedEvent('sample_rate', 'transaction');\n      }\n\n      return undefined;\n    }\n\n    const finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(s => s !== this && s.endTimestamp) : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      this.endTimestamp = finishedSpans.reduce((prev, current) => {\n        if (prev.endTimestamp && current.endTimestamp) {\n          return prev.endTimestamp > current.endTimestamp ? prev : current;\n        }\n        return prev;\n      }).endTimestamp;\n    }\n\n    const metadata = this.metadata;\n\n    const transaction = {\n      contexts: {\n        ...this._contexts,\n        // We don't want to override trace context\n        trace: this.getTraceContext(),\n      },\n      spans: finishedSpans,\n      start_timestamp: this.startTimestamp,\n      tags: this.tags,\n      timestamp: this.endTimestamp,\n      transaction: this.name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        ...metadata,\n        dynamicSamplingContext: this.getDynamicSamplingContext(),\n      },\n      ...(metadata.source && {\n        transaction_info: {\n          source: metadata.source,\n        },\n      }),\n    };\n\n    const hasMeasurements = Object.keys(this._measurements).length > 0;\n\n    if (hasMeasurements) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction',\n          JSON.stringify(this._measurements, undefined, 2),\n        );\n      transaction.measurements = this._measurements;\n    }\n\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`);\n\n    return this._hub.captureEvent(transaction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   toContext() {\n    const spanContext = super.toContext();\n\n    return dropUndefinedKeys({\n      ...spanContext,\n      name: this.name,\n      trimEnd: this._trimEnd,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n   updateWithContext(transactionContext) {\n    super.updateWithContext(transactionContext);\n\n    this.name = transactionContext.name || '';\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @experimental\n   */\n   getDynamicSamplingContext() {\n    if (this._frozenDynamicSamplingContext) {\n      return this._frozenDynamicSamplingContext;\n    }\n\n    const hub = this._hub || getCurrentHub();\n    const client = hub.getClient();\n\n    if (!client) return {};\n\n    const scope = hub.getScope();\n    const dsc = getDynamicSamplingContextFromClient(this.traceId, client, scope);\n\n    const maybeSampleRate = this.metadata.sampleRate;\n    if (maybeSampleRate !== undefined) {\n      dsc.sample_rate = `${maybeSampleRate}`;\n    }\n\n    // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n    const source = this.metadata.source;\n    if (source && source !== 'url') {\n      dsc.transaction = this.name;\n    }\n\n    if (this.sampled !== undefined) {\n      dsc.sampled = String(this.sampled);\n    }\n\n    // Uncomment if we want to make DSC immutable\n    // this._frozenDynamicSamplingContext = dsc;\n\n    return dsc;\n  }\n\n  /**\n   * Override the current hub with a new one.\n   * Used if you want another hub to finish the transaction.\n   *\n   * @internal\n   */\n   setHub(hub) {\n    this._hub = hub;\n  }\n}\n\nexport { Transaction };\n//# sourceMappingURL=transaction.js.map\n"],"names":["Span","hub","getCurrentHub","SpanRecorder","logger","dropUndefinedKeys","getDynamicSamplingContextFromClient"],"mappings":"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","x_google_ignoreList":[0]}