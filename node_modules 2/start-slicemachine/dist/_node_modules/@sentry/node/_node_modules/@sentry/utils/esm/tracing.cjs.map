{"version":3,"file":"tracing.cjs","sources":["../../../../../../../../../../node_modules/@sentry/node/node_modules/@sentry/utils/esm/tracing.js"],"sourcesContent":["import { baggageHeaderToDynamicSamplingContext } from './baggage.js';\nimport { uuid4 } from './misc.js';\n\nconst TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nfunction extractTraceparentData(traceparent) {\n  if (!traceparent) {\n    return undefined;\n  }\n\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!matches) {\n    return undefined;\n  }\n\n  let parentSampled;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2],\n  };\n}\n\n/**\n * Create tracing context from incoming headers.\n */\nfunction tracingContextFromHeaders(\n  sentryTrace,\n  baggage,\n)\n\n {\n  const traceparentData = extractTraceparentData(sentryTrace);\n  const dynamicSamplingContext = baggageHeaderToDynamicSamplingContext(baggage);\n\n  const { traceId, parentSpanId, parentSampled } = traceparentData || {};\n\n  const propagationContext = {\n    traceId: traceId || uuid4(),\n    spanId: uuid4().substring(16),\n    sampled: parentSampled,\n  };\n\n  if (parentSpanId) {\n    propagationContext.parentSpanId = parentSpanId;\n  }\n\n  if (dynamicSamplingContext) {\n    propagationContext.dsc = dynamicSamplingContext ;\n  }\n\n  return {\n    traceparentData,\n    dynamicSamplingContext,\n    propagationContext,\n  };\n}\n\n/**\n * Create sentry-trace header from span context values.\n */\nfunction generateSentryTraceHeader(\n  traceId = uuid4(),\n  spanId = uuid4().substring(16),\n  sampled,\n) {\n  let sampledString = '';\n  if (sampled !== undefined) {\n    sampledString = sampled ? '-1' : '-0';\n  }\n  return `${traceId}-${spanId}${sampledString}`;\n}\n\nexport { TRACEPARENT_REGEXP, extractTraceparentData, generateSentryTraceHeader, tracingContextFromHeaders };\n//# sourceMappingURL=tracing.js.map\n"],"names":["baggage","baggageHeaderToDynamicSamplingContext","uuid4"],"mappings":";;;;AAGK,MAAC,qBAAqB,IAAI;AAAA,EAC7B;AAAA;AAKF;AASA,SAAS,uBAAuB,aAAa;AAC3C,MAAI,CAAC,aAAa;AAChB,WAAO;AAAA,EACR;AAED,QAAM,UAAU,YAAY,MAAM,kBAAkB;AACpD,MAAI,CAAC,SAAS;AACZ,WAAO;AAAA,EACR;AAED,MAAI;AACJ,MAAI,QAAQ,CAAC,MAAM,KAAK;AACtB,oBAAgB;AAAA,EACjB,WAAU,QAAQ,CAAC,MAAM,KAAK;AAC7B,oBAAgB;AAAA,EACjB;AAED,SAAO;AAAA,IACL,SAAS,QAAQ,CAAC;AAAA,IAClB;AAAA,IACA,cAAc,QAAQ,CAAC;AAAA,EAC3B;AACA;AAKA,SAAS,0BACP,aACAA,WAGD;AACC,QAAM,kBAAkB,uBAAuB,WAAW;AAC1D,QAAM,yBAAyBC,8CAAsCD,SAAO;AAE5E,QAAM,EAAE,SAAS,cAAc,cAAa,IAAK,mBAAmB,CAAA;AAEpE,QAAM,qBAAqB;AAAA,IACzB,SAAS,WAAWE,WAAO;AAAA,IAC3B,QAAQA,KAAK,MAAA,EAAG,UAAU,EAAE;AAAA,IAC5B,SAAS;AAAA,EACb;AAEE,MAAI,cAAc;AAChB,uBAAmB,eAAe;AAAA,EACnC;AAED,MAAI,wBAAwB;AAC1B,uBAAmB,MAAM;AAAA,EAC1B;AAED,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACA;AAKA,SAAS,0BACP,UAAUA,KAAAA,MAAO,GACjB,SAASA,KAAK,MAAA,EAAG,UAAU,EAAE,GAC7B,SACA;AACA,MAAI,gBAAgB;AACpB,MAAI,YAAY,QAAW;AACzB,oBAAgB,UAAU,OAAO;AAAA,EAClC;AACD,SAAO,GAAG,WAAW,SAAS;AAChC;;;;;","x_google_ignoreList":[0]}