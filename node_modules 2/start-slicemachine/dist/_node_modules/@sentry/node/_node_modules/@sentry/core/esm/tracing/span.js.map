{"version":3,"file":"span.js","sources":["../../../../../../../../../../../node_modules/@sentry/node/node_modules/@sentry/core/esm/tracing/span.js"],"sourcesContent":["import { uuid4, timestampInSeconds, logger, generateSentryTraceHeader, dropUndefinedKeys } from '@sentry/utils';\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nclass SpanRecorder {\n\n   constructor(maxlen = 1000) {\n    this._maxlen = maxlen;\n    this.spans = [];\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n   add(span) {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  }\n}\n\n/**\n * Span contains all data about a span\n */\nclass Span  {\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * Internal keeper of the status\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * Timestamp in seconds when the span was created.\n   */\n\n  /**\n   * Timestamp in seconds when the span ended.\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  /**\n   * List of spans that were finalized\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * The instrumenter that created this span.\n   */\n\n  /**\n   * The origin of the span, giving context about what created the span.\n   */\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n   constructor(spanContext = {}) {\n    this.traceId = spanContext.traceId || uuid4();\n    this.spanId = spanContext.spanId || uuid4().substring(16);\n    this.startTimestamp = spanContext.startTimestamp || timestampInSeconds();\n    this.tags = spanContext.tags || {};\n    this.data = spanContext.data || {};\n    this.instrumenter = spanContext.instrumenter || 'sentry';\n    this.origin = spanContext.origin || 'manual';\n\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n    if (spanContext.name) {\n      this.description = spanContext.name;\n    }\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n\n  /** An alias for `description` of the Span. */\n   get name() {\n    return this.description || '';\n  }\n  /** Update the name of the span. */\n   set name(name) {\n    this.setName(name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   startChild(\n    spanContext,\n  ) {\n    const childSpan = new Span({\n      ...spanContext,\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId,\n    });\n\n    childSpan.spanRecorder = this.spanRecorder;\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    childSpan.transaction = this.transaction;\n\n    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && childSpan.transaction) {\n      const opStr = (spanContext && spanContext.op) || '< unknown op >';\n      const nameStr = childSpan.transaction.name || '< unknown name >';\n      const idStr = childSpan.transaction.spanId;\n\n      const logMessage = `[Tracing] Starting '${opStr}' span on transaction '${nameStr}' (${idStr}).`;\n      childSpan.transaction.metadata.spanMetadata[childSpan.spanId] = { logMessage };\n      logger.log(logMessage);\n    }\n\n    return childSpan;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setTag(key, value) {\n    this.tags = { ...this.tags, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n   setData(key, value) {\n    this.data = { ...this.data, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setStatus(value) {\n    this.status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setHttpStatus(httpStatus) {\n    this.setTag('http.status_code', String(httpStatus));\n    this.setData('http.response.status_code', httpStatus);\n    const spanStatus = spanStatusfromHttpCode(httpStatus);\n    if (spanStatus !== 'unknown_error') {\n      this.setStatus(spanStatus);\n    }\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setName(name) {\n    this.description = name;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   isSuccess() {\n    return this.status === 'ok';\n  }\n\n  /**\n   * @inheritDoc\n   */\n   finish(endTimestamp) {\n    if (\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&\n      // Don't call this for transactions\n      this.transaction &&\n      this.transaction.spanId !== this.spanId\n    ) {\n      const { logMessage } = this.transaction.metadata.spanMetadata[this.spanId];\n      if (logMessage) {\n        logger.log((logMessage ).replace('Starting', 'Finishing'));\n      }\n    }\n\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampInSeconds();\n  }\n\n  /**\n   * @inheritDoc\n   */\n   toTraceparent() {\n    return generateSentryTraceHeader(this.traceId, this.spanId, this.sampled);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   toContext() {\n    return dropUndefinedKeys({\n      data: this.data,\n      description: this.description,\n      endTimestamp: this.endTimestamp,\n      op: this.op,\n      parentSpanId: this.parentSpanId,\n      sampled: this.sampled,\n      spanId: this.spanId,\n      startTimestamp: this.startTimestamp,\n      status: this.status,\n      tags: this.tags,\n      traceId: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n   updateWithContext(spanContext) {\n    this.data = spanContext.data || {};\n    this.description = spanContext.description;\n    this.endTimestamp = spanContext.endTimestamp;\n    this.op = spanContext.op;\n    this.parentSpanId = spanContext.parentSpanId;\n    this.sampled = spanContext.sampled;\n    this.spanId = spanContext.spanId || this.spanId;\n    this.startTimestamp = spanContext.startTimestamp || this.startTimestamp;\n    this.status = spanContext.status;\n    this.tags = spanContext.tags || {};\n    this.traceId = spanContext.traceId || this.traceId;\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   getTraceContext() {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n   toJSON()\n\n {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId,\n      origin: this.origin,\n    });\n  }\n}\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nfunction spanStatusfromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n\n  return 'unknown_error';\n}\n\nexport { Span, SpanRecorder, spanStatusfromHttpCode };\n//# sourceMappingURL=span.js.map\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}