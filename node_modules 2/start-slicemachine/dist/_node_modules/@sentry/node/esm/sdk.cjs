"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index$1 = require("./async/index.cjs");
const client = require("./client.cjs");
const console = require("./integrations/console.cjs");
const http = require("./integrations/http.cjs");
const onuncaughtexception = require("./integrations/onuncaughtexception.cjs");
const onunhandledrejection = require("./integrations/onunhandledrejection.cjs");
const linkederrors = require("./integrations/linkederrors.cjs");
const modules = require("./integrations/modules.cjs");
const contextlines = require("./integrations/contextlines.cjs");
const context = require("./integrations/context.cjs");
const requestdata = require("./integrations/requestdata.cjs");
const localvariables = require("./integrations/localvariables.cjs");
const index = require("./integrations/undici/index.cjs");
const module$1 = require("./module.cjs");
const http$1 = require("./transports/http.cjs");
const hub = require('./../_node_modules/@sentry/core/esm/hub.cjs');
const _optionalChain = require('./../_node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.cjs');
const stacktrace = require('./../_node_modules/@sentry/utils/esm/stacktrace.cjs');
const integration = require('./../_node_modules/@sentry/core/esm/integration.cjs');
const sdk = require('./../_node_modules/@sentry/core/esm/sdk.cjs');
const worldwide = require('./../_node_modules/@sentry/utils/esm/worldwide.cjs');
const tracing = require('./../_node_modules/@sentry/utils/esm/tracing.cjs');
const inboundfilters = require('./../_node_modules/@sentry/core/esm/integrations/inboundfilters.cjs');
const functiontostring = require('./../_node_modules/@sentry/core/esm/integrations/functiontostring.cjs');
const defaultIntegrations = [
  // Common
  new inboundfilters.InboundFilters(),
  new functiontostring.FunctionToString(),
  // Native Wrappers
  new console.Console(),
  new http.Http(),
  new index.Undici(),
  // Global Handlers
  new onuncaughtexception.OnUncaughtException(),
  new onunhandledrejection.OnUnhandledRejection(),
  // Event Info
  new contextlines.ContextLines(),
  new localvariables.LocalVariables(),
  new context.Context(),
  new modules.Modules(),
  new requestdata.RequestData(),
  // Misc
  new linkederrors.LinkedErrors()
];
function init(options = {}) {
  const carrier = hub.getMainCarrier();
  index$1.setNodeAsyncContextStrategy();
  const autoloadedIntegrations = _optionalChain._optionalChain([carrier, "access", (_) => _.__SENTRY__, "optionalAccess", (_2) => _2.integrations]) || [];
  options.defaultIntegrations = options.defaultIntegrations === false ? [] : [
    ...Array.isArray(options.defaultIntegrations) ? options.defaultIntegrations : defaultIntegrations,
    ...autoloadedIntegrations
  ];
  if (options.dsn === void 0 && process.env.SENTRY_DSN) {
    options.dsn = process.env.SENTRY_DSN;
  }
  const sentryTracesSampleRate = process.env.SENTRY_TRACES_SAMPLE_RATE;
  if (options.tracesSampleRate === void 0 && sentryTracesSampleRate) {
    const tracesSampleRate = parseFloat(sentryTracesSampleRate);
    if (isFinite(tracesSampleRate)) {
      options.tracesSampleRate = tracesSampleRate;
    }
  }
  if (options.release === void 0) {
    const detectedRelease = getSentryRelease();
    if (detectedRelease !== void 0) {
      options.release = detectedRelease;
    } else {
      options.autoSessionTracking = false;
    }
  }
  if (options.environment === void 0 && process.env.SENTRY_ENVIRONMENT) {
    options.environment = process.env.SENTRY_ENVIRONMENT;
  }
  if (options.autoSessionTracking === void 0 && options.dsn !== void 0) {
    options.autoSessionTracking = true;
  }
  if (options.instrumenter === void 0) {
    options.instrumenter = "sentry";
  }
  const clientOptions = {
    ...options,
    stackParser: stacktrace.stackParserFromStackParserOptions(options.stackParser || defaultStackParser),
    integrations: integration.getIntegrationsToSetup(options),
    transport: options.transport || http$1.makeNodeTransport
  };
  sdk.initAndBind(options.clientClass || client.NodeClient, clientOptions);
  if (options.autoSessionTracking) {
    startSessionTracking();
  }
  updateScopeFromEnvVariables();
}
function getSentryRelease(fallback) {
  if (process.env.SENTRY_RELEASE) {
    return process.env.SENTRY_RELEASE;
  }
  if (worldwide.GLOBAL_OBJ.SENTRY_RELEASE && worldwide.GLOBAL_OBJ.SENTRY_RELEASE.id) {
    return worldwide.GLOBAL_OBJ.SENTRY_RELEASE.id;
  }
  return (
    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables
    process.env.GITHUB_SHA || // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata
    process.env.COMMIT_REF || // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables
    process.env.VERCEL_GIT_COMMIT_SHA || process.env.VERCEL_GITHUB_COMMIT_SHA || process.env.VERCEL_GITLAB_COMMIT_SHA || process.env.VERCEL_BITBUCKET_COMMIT_SHA || // Zeit (now known as Vercel)
    process.env.ZEIT_GITHUB_COMMIT_SHA || process.env.ZEIT_GITLAB_COMMIT_SHA || process.env.ZEIT_BITBUCKET_COMMIT_SHA || fallback
  );
}
const defaultStackParser = stacktrace.createStackParser(stacktrace.nodeStackLineParser(module$1.getModuleFromFilename));
function startSessionTracking() {
  const hub$1 = hub.getCurrentHub();
  hub$1.startSession();
  process.on("beforeExit", () => {
    const session = hub$1.getScope().getSession();
    const terminalStates = ["exited", "crashed"];
    if (session && !terminalStates.includes(session.status))
      hub$1.endSession();
  });
}
function updateScopeFromEnvVariables() {
  const sentryUseEnvironment = (process.env.SENTRY_USE_ENVIRONMENT || "").toLowerCase();
  if (!["false", "n", "no", "off", "0"].includes(sentryUseEnvironment)) {
    const sentryTraceEnv = process.env.SENTRY_TRACE;
    const baggageEnv = process.env.SENTRY_BAGGAGE;
    const { propagationContext } = tracing.tracingContextFromHeaders(sentryTraceEnv, baggageEnv);
    hub.getCurrentHub().getScope().setPropagationContext(propagationContext);
  }
}
exports.defaultIntegrations = defaultIntegrations;
exports.defaultStackParser = defaultStackParser;
exports.getSentryRelease = getSentryRelease;
exports.init = init;
//# sourceMappingURL=sdk.cjs.map
