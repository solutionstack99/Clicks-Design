{"version":3,"file":"onuncaughtexception.js","sources":["../../../../../../../../node_modules/@sentry/node/esm/integrations/onuncaughtexception.js"],"sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { logger } from '@sentry/utils';\nimport { logAndExitProcess } from './utils/errorhandling.js';\n\n/** Global Exception handler */\nclass OnUncaughtException  {\n  /**\n   * @inheritDoc\n   */\n   static __initStatic() {this.id = 'OnUncaughtException';}\n\n  /**\n   * @inheritDoc\n   */\n   __init() {this.name = OnUncaughtException.id;}\n\n  /**\n   * @inheritDoc\n   */\n    __init2() {this.handler = this._makeErrorHandler();}\n\n  // CAREFUL: Please think twice before updating the way _options looks because the Next.js SDK depends on it in `index.server.ts`\n\n  /**\n   * @inheritDoc\n   */\n   constructor(options = {}) {OnUncaughtException.prototype.__init.call(this);OnUncaughtException.prototype.__init2.call(this);\n    this._options = {\n      exitEvenIfOtherHandlersAreRegistered: true,\n      ...options,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setupOnce() {\n    global.process.on('uncaughtException', this.handler);\n  }\n\n  /**\n   * @hidden\n   */\n   _makeErrorHandler() {\n    const timeout = 2000;\n    let caughtFirstError = false;\n    let caughtSecondError = false;\n    let calledFatalError = false;\n    let firstError;\n\n    return (error) => {\n      let onFatalError = logAndExitProcess;\n      const client = getCurrentHub().getClient();\n\n      if (this._options.onFatalError) {\n        onFatalError = this._options.onFatalError;\n      } else if (client && client.getOptions().onFatalError) {\n        onFatalError = client.getOptions().onFatalError ;\n      }\n\n      // Attaching a listener to `uncaughtException` will prevent the node process from exiting. We generally do not\n      // want to alter this behaviour so we check for other listeners that users may have attached themselves and adjust\n      // exit behaviour of the SDK accordingly:\n      // - If other listeners are attached, do not exit.\n      // - If the only listener attached is ours, exit.\n      const userProvidedListenersCount = (\n        global.process.listeners('uncaughtException')\n      ).reduce((acc, listener) => {\n        if (\n          // There are 3 listeners we ignore:\n          listener.name === 'domainUncaughtExceptionClear' || // as soon as we're using domains this listener is attached by node itself\n          (listener.tag && listener.tag === 'sentry_tracingErrorCallback') || // the handler we register for tracing\n          listener === this.handler // the handler we register in this integration\n        ) {\n          return acc;\n        } else {\n          return acc + 1;\n        }\n      }, 0);\n\n      const processWouldExit = userProvidedListenersCount === 0;\n      const shouldApplyFatalHandlingLogic = this._options.exitEvenIfOtherHandlersAreRegistered || processWouldExit;\n\n      if (!caughtFirstError) {\n        const hub = getCurrentHub();\n\n        // this is the first uncaught error and the ultimate reason for shutting down\n        // we want to do absolutely everything possible to ensure it gets captured\n        // also we want to make sure we don't go recursion crazy if more errors happen after this one\n        firstError = error;\n        caughtFirstError = true;\n\n        if (hub.getIntegration(OnUncaughtException)) {\n          hub.withScope((scope) => {\n            scope.setLevel('fatal');\n            hub.captureException(error, {\n              originalException: error,\n              data: { mechanism: { handled: false, type: 'onuncaughtexception' } },\n            });\n            if (!calledFatalError && shouldApplyFatalHandlingLogic) {\n              calledFatalError = true;\n              onFatalError(error);\n            }\n          });\n        } else {\n          if (!calledFatalError && shouldApplyFatalHandlingLogic) {\n            calledFatalError = true;\n            onFatalError(error);\n          }\n        }\n      } else {\n        if (shouldApplyFatalHandlingLogic) {\n          if (calledFatalError) {\n            // we hit an error *after* calling onFatalError - pretty boned at this point, just shut it down\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&\n              logger.warn(\n                'uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown',\n              );\n            logAndExitProcess(error);\n          } else if (!caughtSecondError) {\n            // two cases for how we can hit this branch:\n            //   - capturing of first error blew up and we just caught the exception from that\n            //     - quit trying to capture, proceed with shutdown\n            //   - a second independent error happened while waiting for first error to capture\n            //     - want to avoid causing premature shutdown before first error capture finishes\n            // it's hard to immediately tell case 1 from case 2 without doing some fancy/questionable domain stuff\n            // so let's instead just delay a bit before we proceed with our action here\n            // in case 1, we just wait a bit unnecessarily but ultimately do the same thing\n            // in case 2, the delay hopefully made us wait long enough for the capture to finish\n            // two potential nonideal outcomes:\n            //   nonideal case 1: capturing fails fast, we sit around for a few seconds unnecessarily before proceeding correctly by calling onFatalError\n            //   nonideal case 2: case 2 happens, 1st error is captured but slowly, timeout completes before capture and we treat second error as the sendErr of (nonexistent) failure from trying to capture first error\n            // note that after hitting this branch, we might catch more errors where (caughtSecondError && !calledFatalError)\n            //   we ignore them - they don't matter to us, we're just waiting for the second error timeout to finish\n            caughtSecondError = true;\n            setTimeout(() => {\n              if (!calledFatalError) {\n                // it was probably case 1, let's treat err as the sendErr and call onFatalError\n                calledFatalError = true;\n                onFatalError(firstError, error);\n              }\n            }, timeout); // capturing could take at least sendTimeout to fail, plus an arbitrary second for how long it takes to collect surrounding source etc\n          }\n        }\n      }\n    };\n  }\n} OnUncaughtException.__initStatic();\n\nexport { OnUncaughtException };\n//# sourceMappingURL=onuncaughtexception.js.map\n"],"names":[],"mappings":";;;AAKA,MAAM,oBAAqB;AAAA;AAAA;AAAA;AAAA,EAIxB,OAAO,eAAe;AAAC,SAAK,KAAK;AAAA,EAAsB;AAAA;AAAA;AAAA;AAAA,EAKvD,SAAS;AAAC,SAAK,OAAO,oBAAoB;AAAA,EAAG;AAAA;AAAA;AAAA;AAAA,EAK5C,UAAU;AAAC,SAAK,UAAU,KAAK,kBAAmB;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOpD,YAAY,UAAU,CAAE,GAAE;AAAC,wBAAoB,UAAU,OAAO,KAAK,IAAI;AAAE,wBAAoB,UAAU,QAAQ,KAAK,IAAI;AACzH,SAAK,WAAW;AAAA,MACd,sCAAsC;AAAA,MACtC,GAAG;AAAA,IACT;AAAA,EACG;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY;AACX,WAAO,QAAQ,GAAG,qBAAqB,KAAK,OAAO;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB;AACnB,UAAM,UAAU;AAChB,QAAI,mBAAmB;AACvB,QAAI,oBAAoB;AACxB,QAAI,mBAAmB;AACvB,QAAI;AAEJ,WAAO,CAAC,UAAU;AAChB,UAAI,eAAe;AACnB,YAAM,SAAS,gBAAgB;AAE/B,UAAI,KAAK,SAAS,cAAc;AAC9B,uBAAe,KAAK,SAAS;AAAA,MAC9B,WAAU,UAAU,OAAO,WAAU,EAAG,cAAc;AACrD,uBAAe,OAAO,WAAY,EAAC;AAAA,MACpC;AAOD,YAAM,6BACJ,OAAO,QAAQ,UAAU,mBAAmB,EAC5C,OAAO,CAAC,KAAK,aAAa;AAC1B;AAAA;AAAA,UAEE,SAAS,SAAS;AAAA,UACjB,SAAS,OAAO,SAAS,QAAQ;AAAA,UAClC,aAAa,KAAK;AAAA,UAClB;AACA,iBAAO;AAAA,QACjB,OAAe;AACL,iBAAO,MAAM;AAAA,QACd;AAAA,MACF,GAAE,CAAC;AAEJ,YAAM,mBAAmB,+BAA+B;AACxD,YAAM,gCAAgC,KAAK,SAAS,wCAAwC;AAE5F,UAAI,CAAC,kBAAkB;AACrB,cAAM,MAAM;AAKZ,qBAAa;AACb,2BAAmB;AAEnB,YAAI,IAAI,eAAe,mBAAmB,GAAG;AAC3C,cAAI,UAAU,CAAC,UAAU;AACvB,kBAAM,SAAS,OAAO;AACtB,gBAAI,iBAAiB,OAAO;AAAA,cAC1B,mBAAmB;AAAA,cACnB,MAAM,EAAE,WAAW,EAAE,SAAS,OAAO,MAAM,wBAAyB;AAAA,YAClF,CAAa;AACD,gBAAI,CAAC,oBAAoB,+BAA+B;AACtD,iCAAmB;AACnB,2BAAa,KAAK;AAAA,YACnB;AAAA,UACb,CAAW;AAAA,QACX,OAAe;AACL,cAAI,CAAC,oBAAoB,+BAA+B;AACtD,+BAAmB;AACnB,yBAAa,KAAK;AAAA,UACnB;AAAA,QACF;AAAA,MACT,OAAa;AACL,YAAI,+BAA+B;AACjC,cAAI,kBAAkB;AAEpB,aAAC,OAAO,qBAAqB,eAAe,qBAC1C,OAAO;AAAA,cACL;AAAA,YAChB;AACY,8BAAkB,KAAK;AAAA,UACnC,WAAqB,CAAC,mBAAmB;AAe7B,gCAAoB;AACpB,uBAAW,MAAM;AACf,kBAAI,CAAC,kBAAkB;AAErB,mCAAmB;AACnB,6BAAa,YAAY,KAAK;AAAA,cAC/B;AAAA,YACF,GAAE,OAAO;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,IACP;AAAA,EACG;AACH;AAAE,oBAAoB,aAAc;","x_google_ignoreList":[0]}