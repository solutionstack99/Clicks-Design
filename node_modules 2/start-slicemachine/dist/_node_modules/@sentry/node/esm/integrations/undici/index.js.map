{"version":3,"file":"index.js","sources":["../../../../../../../../../node_modules/@sentry/node/esm/integrations/undici/index.js"],"sourcesContent":["import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { getCurrentHub, getDynamicSamplingContextFromClient } from '@sentry/core';\nimport { dynamicRequire, dynamicSamplingContextToSentryBaggageHeader, generateSentryTraceHeader, parseUrl, stringMatchesSomePattern, getSanitizedUrlString } from '@sentry/utils';\nimport { LRUMap } from 'lru_map';\nimport { NODE_VERSION } from '../../nodeVersion.js';\nimport { isSentryRequest } from '../utils/http.js';\n\nvar ChannelName;(function (ChannelName) {\n  // https://github.com/nodejs/undici/blob/e6fc80f809d1217814c044f52ed40ef13f21e43c/docs/api/DiagnosticsChannel.md#undicirequestcreate\n  const RequestCreate = 'undici:request:create'; ChannelName[\"RequestCreate\"] = RequestCreate;\n  const RequestEnd = 'undici:request:headers'; ChannelName[\"RequestEnd\"] = RequestEnd;\n  const RequestError = 'undici:request:error'; ChannelName[\"RequestError\"] = RequestError;\n})(ChannelName || (ChannelName = {}));\n\n// Please note that you cannot use `console.log` to debug the callbacks registered to the `diagnostics_channel` API.\n// To debug, you can use `writeFileSync` to write to a file:\n// https://nodejs.org/api/async_hooks.html#printing-in-asynchook-callbacks\n//\n// import { writeFileSync } from 'fs';\n// import { format } from 'util';\n//\n// function debug(...args: any): void {\n//   // Use a function like this one when debugging inside an AsyncHook callback\n//   // @ts-expect-error any\n//   writeFileSync('log.out', `${format(...args)}\\n`, { flag: 'a' });\n// }\n\n/**\n * Instruments outgoing HTTP requests made with the `undici` package via\n * Node's `diagnostics_channel` API.\n *\n * Supports Undici 4.7.0 or higher.\n *\n * Requires Node 16.17.0 or higher.\n */\nclass Undici  {\n  /**\n   * @inheritDoc\n   */\n   static __initStatic() {this.id = 'Undici';}\n\n  /**\n   * @inheritDoc\n   */\n   __init() {this.name = Undici.id;}\n\n    __init2() {this._createSpanUrlMap = new LRUMap(100);}\n    __init3() {this._headersUrlMap = new LRUMap(100);}\n\n   constructor(_options = {}) {Undici.prototype.__init.call(this);Undici.prototype.__init2.call(this);Undici.prototype.__init3.call(this);Undici.prototype.__init4.call(this);Undici.prototype.__init5.call(this);Undici.prototype.__init6.call(this);\n    this._options = {\n      breadcrumbs: _options.breadcrumbs === undefined ? true : _options.breadcrumbs,\n      shouldCreateSpanForRequest: _options.shouldCreateSpanForRequest,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setupOnce(_addGlobalEventProcessor) {\n    // Requires Node 16+ to use the diagnostics_channel API.\n    if (NODE_VERSION.major && NODE_VERSION.major < 16) {\n      return;\n    }\n\n    let ds;\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      ds = dynamicRequire(module, 'diagnostics_channel') ;\n    } catch (e) {\n      // no-op\n    }\n\n    if (!ds || !ds.subscribe) {\n      return;\n    }\n\n    // https://github.com/nodejs/undici/blob/e6fc80f809d1217814c044f52ed40ef13f21e43c/docs/api/DiagnosticsChannel.md\n    ds.subscribe(ChannelName.RequestCreate, this._onRequestCreate);\n    ds.subscribe(ChannelName.RequestEnd, this._onRequestEnd);\n    ds.subscribe(ChannelName.RequestError, this._onRequestError);\n  }\n\n  /** Helper that wraps shouldCreateSpanForRequest option */\n   _shouldCreateSpan(url) {\n    if (this._options.shouldCreateSpanForRequest === undefined) {\n      return true;\n    }\n\n    const cachedDecision = this._createSpanUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = this._options.shouldCreateSpanForRequest(url);\n    this._createSpanUrlMap.set(url, decision);\n    return decision;\n  }\n\n   __init4() {this._onRequestCreate = (message) => {\n    const hub = getCurrentHub();\n    if (!hub.getIntegration(Undici)) {\n      return;\n    }\n\n    const { request } = message ;\n\n    const stringUrl = request.origin ? request.origin.toString() + request.path : request.path;\n\n    if (isSentryRequest(stringUrl) || request.__sentry_span__ !== undefined) {\n      return;\n    }\n\n    const client = hub.getClient();\n    if (!client) {\n      return;\n    }\n\n    const clientOptions = client.getOptions();\n    const scope = hub.getScope();\n\n    const parentSpan = scope.getSpan();\n\n    const span = this._shouldCreateSpan(stringUrl) ? createRequestSpan(parentSpan, request, stringUrl) : undefined;\n    if (span) {\n      request.__sentry_span__ = span;\n    }\n\n    const shouldAttachTraceData = (url) => {\n      if (clientOptions.tracePropagationTargets === undefined) {\n        return true;\n      }\n\n      const cachedDecision = this._headersUrlMap.get(url);\n      if (cachedDecision !== undefined) {\n        return cachedDecision;\n      }\n\n      const decision = stringMatchesSomePattern(url, clientOptions.tracePropagationTargets);\n      this._headersUrlMap.set(url, decision);\n      return decision;\n    };\n\n    if (shouldAttachTraceData(stringUrl)) {\n      if (span) {\n        const dynamicSamplingContext = _optionalChain([span, 'optionalAccess', _4 => _4.transaction, 'optionalAccess', _5 => _5.getDynamicSamplingContext, 'call', _6 => _6()]);\n        const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n\n        setHeadersOnRequest(request, span.toTraceparent(), sentryBaggageHeader);\n      } else {\n        const { traceId, sampled, dsc } = scope.getPropagationContext();\n        const sentryTrace = generateSentryTraceHeader(traceId, undefined, sampled);\n        const dynamicSamplingContext = dsc || getDynamicSamplingContextFromClient(traceId, client, scope);\n        const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n        setHeadersOnRequest(request, sentryTrace, sentryBaggageHeader);\n      }\n    }\n  };}\n\n   __init5() {this._onRequestEnd = (message) => {\n    const hub = getCurrentHub();\n    if (!hub.getIntegration(Undici)) {\n      return;\n    }\n\n    const { request, response } = message ;\n\n    const stringUrl = request.origin ? request.origin.toString() + request.path : request.path;\n\n    if (isSentryRequest(stringUrl)) {\n      return;\n    }\n\n    const span = request.__sentry_span__;\n    if (span) {\n      span.setHttpStatus(response.statusCode);\n      span.finish();\n    }\n\n    if (this._options.breadcrumbs) {\n      hub.addBreadcrumb(\n        {\n          category: 'http',\n          data: {\n            method: request.method,\n            status_code: response.statusCode,\n            url: stringUrl,\n          },\n          type: 'http',\n        },\n        {\n          event: 'response',\n          request,\n          response,\n        },\n      );\n    }\n  };}\n\n   __init6() {this._onRequestError = (message) => {\n    const hub = getCurrentHub();\n    if (!hub.getIntegration(Undici)) {\n      return;\n    }\n\n    const { request } = message ;\n\n    const stringUrl = request.origin ? request.origin.toString() + request.path : request.path;\n\n    if (isSentryRequest(stringUrl)) {\n      return;\n    }\n\n    const span = request.__sentry_span__;\n    if (span) {\n      span.setStatus('internal_error');\n      span.finish();\n    }\n\n    if (this._options.breadcrumbs) {\n      hub.addBreadcrumb(\n        {\n          category: 'http',\n          data: {\n            method: request.method,\n            url: stringUrl,\n          },\n          level: 'error',\n          type: 'http',\n        },\n        {\n          event: 'error',\n          request,\n        },\n      );\n    }\n  };}\n}Undici.__initStatic();\n\nfunction setHeadersOnRequest(\n  request,\n  sentryTrace,\n  sentryBaggageHeader,\n) {\n  if (request.__sentry_has_headers__) {\n    return;\n  }\n\n  request.addHeader('sentry-trace', sentryTrace);\n  if (sentryBaggageHeader) {\n    request.addHeader('baggage', sentryBaggageHeader);\n  }\n\n  request.__sentry_has_headers__ = true;\n}\n\nfunction createRequestSpan(\n  activeSpan,\n  request,\n  stringUrl,\n) {\n  const url = parseUrl(stringUrl);\n\n  const method = request.method || 'GET';\n  const data = {\n    'http.method': method,\n  };\n  if (url.search) {\n    data['http.query'] = url.search;\n  }\n  if (url.hash) {\n    data['http.fragment'] = url.hash;\n  }\n  return _optionalChain([activeSpan, 'optionalAccess', _7 => _7.startChild, 'call', _8 => _8({\n    op: 'http.client',\n    origin: 'auto.http.node.undici',\n    description: `${method} ${getSanitizedUrlString(url)}`,\n    data,\n  })]);\n}\n\nexport { ChannelName, Undici };\n//# sourceMappingURL=index.js.map\n"],"names":["ChannelName","LRUMap"],"mappings":"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","x_google_ignoreList":[0]}