"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const requestdata = require("../requestdata.cjs");
const requestdata$1 = require('./../../_node_modules/@sentry/utils/esm/requestdata.cjs');
const DEFAULT_OPTIONS = {
  include: {
    cookies: true,
    data: true,
    headers: true,
    ip: false,
    query_string: true,
    url: true,
    user: {
      id: true,
      username: true,
      email: true
    }
  },
  transactionNamingScheme: "methodPath"
};
class RequestData {
  /**
   * @inheritDoc
   */
  static __initStatic() {
    this.id = "RequestData";
  }
  /**
   * @inheritDoc
   */
  __init() {
    this.name = RequestData.id;
  }
  /**
   * Function for adding request data to event. Defaults to `addRequestDataToEvent` from `@sentry/node` for now, but
   * left as a property so this integration can be moved to `@sentry/core` as a base class in case we decide to use
   * something similar in browser-based SDKs in the future.
   */
  /**
   * @inheritDoc
   */
  constructor(options = {}) {
    RequestData.prototype.__init.call(this);
    this._addRequestData = requestdata.addRequestDataToEvent;
    this._options = {
      ...DEFAULT_OPTIONS,
      ...options,
      include: {
        // @ts-expect-error It's mad because `method` isn't a known `include` key. (It's only here and not set by default in
        // `addRequestDataToEvent` for legacy reasons. TODO (v8): Change that.)
        method: true,
        ...DEFAULT_OPTIONS.include,
        ...options.include,
        user: options.include && typeof options.include.user === "boolean" ? options.include.user : {
          ...DEFAULT_OPTIONS.include.user,
          // Unclear why TS still thinks `options.include.user` could be a boolean at this point
          ...(options.include || {}).user
        }
      }
    };
  }
  /**
   * @inheritDoc
   */
  setupOnce(addGlobalEventProcessor, getCurrentHub) {
    const { transactionNamingScheme } = this._options;
    addGlobalEventProcessor((event) => {
      const hub = getCurrentHub();
      const self = hub.getIntegration(RequestData);
      const { sdkProcessingMetadata = {} } = event;
      const req = sdkProcessingMetadata.request;
      if (!self || !req) {
        return event;
      }
      const addRequestDataOptions = sdkProcessingMetadata.requestDataOptionsFromExpressHandler || sdkProcessingMetadata.requestDataOptionsFromGCPWrapper || convertReqDataIntegrationOptsToAddReqDataOpts(this._options);
      const processedEvent = this._addRequestData(event, req, addRequestDataOptions);
      if (event.type === "transaction" || transactionNamingScheme === "handler") {
        return processedEvent;
      }
      const reqWithTransaction = req;
      const transaction = reqWithTransaction._sentryTransaction;
      if (transaction) {
        const shouldIncludeMethodInTransactionName = getSDKName(hub) === "sentry.javascript.nextjs" ? transaction.name.startsWith("/api") : transactionNamingScheme !== "path";
        const [transactionValue] = requestdata$1.extractPathForTransaction(req, {
          path: true,
          method: shouldIncludeMethodInTransactionName,
          customRoute: transaction.name
        });
        processedEvent.transaction = transactionValue;
      }
      return processedEvent;
    });
  }
}
RequestData.__initStatic();
function convertReqDataIntegrationOptsToAddReqDataOpts(integrationOptions) {
  const {
    transactionNamingScheme,
    include: { ip, user, ...requestOptions }
  } = integrationOptions;
  const requestIncludeKeys = [];
  for (const [key, value] of Object.entries(requestOptions)) {
    if (value) {
      requestIncludeKeys.push(key);
    }
  }
  let addReqDataUserOpt;
  if (user === void 0) {
    addReqDataUserOpt = true;
  } else if (typeof user === "boolean") {
    addReqDataUserOpt = user;
  } else {
    const userIncludeKeys = [];
    for (const [key, value] of Object.entries(user)) {
      if (value) {
        userIncludeKeys.push(key);
      }
    }
    addReqDataUserOpt = userIncludeKeys;
  }
  return {
    include: {
      ip,
      user: addReqDataUserOpt,
      request: requestIncludeKeys.length !== 0 ? requestIncludeKeys : void 0,
      transaction: transactionNamingScheme
    }
  };
}
function getSDKName(hub) {
  try {
    return hub.getClient().getOptions()._metadata.sdk.name;
  } catch (err) {
    return void 0;
  }
}
exports.RequestData = RequestData;
//# sourceMappingURL=requestdata.cjs.map
