{"version":3,"file":"http.cjs","sources":["../../../../../../../../node_modules/@sentry/node/esm/integrations/http.js"],"sourcesContent":["import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { getCurrentHub, getDynamicSamplingContextFromClient } from '@sentry/core';\nimport { logger, fill, generateSentryTraceHeader, dynamicSamplingContextToSentryBaggageHeader, stringMatchesSomePattern } from '@sentry/utils';\nimport { LRUMap } from 'lru_map';\nimport { NODE_VERSION } from '../nodeVersion.js';\nimport { normalizeRequestArgs, extractRawUrl, extractUrl, isSentryRequest, cleanSpanDescription } from './utils/http.js';\n\n/**\n * The http module integration instruments Node's internal http module. It creates breadcrumbs, transactions for outgoing\n * http requests and attaches trace data when tracing is enabled via its `tracing` option.\n */\nclass Http  {\n  /**\n   * @inheritDoc\n   */\n   static __initStatic() {this.id = 'Http';}\n\n  /**\n   * @inheritDoc\n   */\n   __init() {this.name = Http.id;}\n\n  /**\n   * @inheritDoc\n   */\n   constructor(options = {}) {Http.prototype.__init.call(this);\n    this._breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n    this._tracing = !options.tracing ? undefined : options.tracing === true ? {} : options.tracing;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setupOnce(\n    _addGlobalEventProcessor,\n    setupOnceGetCurrentHub,\n  ) {\n    // No need to instrument if we don't want to track anything\n    if (!this._breadcrumbs && !this._tracing) {\n      return;\n    }\n\n    const clientOptions = _optionalChain([setupOnceGetCurrentHub, 'call', _ => _(), 'access', _2 => _2.getClient, 'call', _3 => _3(), 'optionalAccess', _4 => _4.getOptions, 'call', _5 => _5()]);\n\n    // Do not auto-instrument for other instrumenter\n    if (clientOptions && clientOptions.instrumenter !== 'sentry') {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('HTTP Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    const shouldCreateSpanForRequest =\n      // eslint-disable-next-line deprecation/deprecation\n      _optionalChain([this, 'access', _6 => _6._tracing, 'optionalAccess', _7 => _7.shouldCreateSpanForRequest]) || _optionalChain([clientOptions, 'optionalAccess', _8 => _8.shouldCreateSpanForRequest]);\n    // eslint-disable-next-line deprecation/deprecation\n    const tracePropagationTargets = _optionalChain([clientOptions, 'optionalAccess', _9 => _9.tracePropagationTargets]) || _optionalChain([this, 'access', _10 => _10._tracing, 'optionalAccess', _11 => _11.tracePropagationTargets]);\n\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const httpModule = require('http');\n    const wrappedHttpHandlerMaker = _createWrappedRequestMethodFactory(\n      httpModule,\n      this._breadcrumbs,\n      shouldCreateSpanForRequest,\n      tracePropagationTargets,\n    );\n    fill(httpModule, 'get', wrappedHttpHandlerMaker);\n    fill(httpModule, 'request', wrappedHttpHandlerMaker);\n\n    // NOTE: Prior to Node 9, `https` used internals of `http` module, thus we don't patch it.\n    // If we do, we'd get double breadcrumbs and double spans for `https` calls.\n    // It has been changed in Node 9, so for all versions equal and above, we patch `https` separately.\n    if (NODE_VERSION.major && NODE_VERSION.major > 8) {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const httpsModule = require('https');\n      const wrappedHttpsHandlerMaker = _createWrappedRequestMethodFactory(\n        httpsModule,\n        this._breadcrumbs,\n        shouldCreateSpanForRequest,\n        tracePropagationTargets,\n      );\n      fill(httpsModule, 'get', wrappedHttpsHandlerMaker);\n      fill(httpsModule, 'request', wrappedHttpsHandlerMaker);\n    }\n  }\n}Http.__initStatic();\n\n// for ease of reading below\n\n/**\n * Function which creates a function which creates wrapped versions of internal `request` and `get` calls within `http`\n * and `https` modules. (NB: Not a typo - this is a creator^2!)\n *\n * @param breadcrumbsEnabled Whether or not to record outgoing requests as breadcrumbs\n * @param tracingEnabled Whether or not to record outgoing requests as tracing spans\n *\n * @returns A function which accepts the exiting handler and returns a wrapped handler\n */\nfunction _createWrappedRequestMethodFactory(\n  httpModule,\n  breadcrumbsEnabled,\n  shouldCreateSpanForRequest,\n  tracePropagationTargets,\n) {\n  // We're caching results so we don't have to recompute regexp every time we create a request.\n  const createSpanUrlMap = new LRUMap(100);\n  const headersUrlMap = new LRUMap(100);\n\n  const shouldCreateSpan = (url) => {\n    if (shouldCreateSpanForRequest === undefined) {\n      return true;\n    }\n\n    const cachedDecision = createSpanUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = shouldCreateSpanForRequest(url);\n    createSpanUrlMap.set(url, decision);\n    return decision;\n  };\n\n  const shouldAttachTraceData = (url) => {\n    if (tracePropagationTargets === undefined) {\n      return true;\n    }\n\n    const cachedDecision = headersUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = stringMatchesSomePattern(url, tracePropagationTargets);\n    headersUrlMap.set(url, decision);\n    return decision;\n  };\n\n  /**\n   * Captures Breadcrumb based on provided request/response pair\n   */\n  function addRequestBreadcrumb(\n    event,\n    requestSpanData,\n    req,\n    res,\n  ) {\n    if (!getCurrentHub().getIntegration(Http)) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'http',\n        data: {\n          status_code: res && res.statusCode,\n          ...requestSpanData,\n        },\n        type: 'http',\n      },\n      {\n        event,\n        request: req,\n        response: res,\n      },\n    );\n  }\n\n  return function wrappedRequestMethodFactory(originalRequestMethod) {\n    return function wrappedMethod( ...args) {\n      const requestArgs = normalizeRequestArgs(httpModule, args);\n      const requestOptions = requestArgs[0];\n      // eslint-disable-next-line deprecation/deprecation\n      const rawRequestUrl = extractRawUrl(requestOptions);\n      const requestUrl = extractUrl(requestOptions);\n\n      // we don't want to record requests to Sentry as either breadcrumbs or spans, so just use the original method\n      if (isSentryRequest(requestUrl)) {\n        return originalRequestMethod.apply(httpModule, requestArgs);\n      }\n\n      const hub = getCurrentHub();\n      const scope = hub.getScope();\n      const parentSpan = scope.getSpan();\n\n      const data = getRequestSpanData(requestUrl, requestOptions);\n\n      const requestSpan = shouldCreateSpan(rawRequestUrl)\n        ? _optionalChain([parentSpan, 'optionalAccess', _12 => _12.startChild, 'call', _13 => _13({\n            op: 'http.client',\n            origin: 'auto.http.node.http',\n            description: `${data['http.method']} ${data.url}`,\n            data,\n          })])\n        : undefined;\n\n      if (shouldAttachTraceData(rawRequestUrl)) {\n        if (requestSpan) {\n          const sentryTraceHeader = requestSpan.toTraceparent();\n          const dynamicSamplingContext = _optionalChain([requestSpan, 'optionalAccess', _14 => _14.transaction, 'optionalAccess', _15 => _15.getDynamicSamplingContext, 'call', _16 => _16()]);\n          addHeadersToRequestOptions(requestOptions, requestUrl, sentryTraceHeader, dynamicSamplingContext);\n        } else {\n          const client = hub.getClient();\n          const { traceId, sampled, dsc } = scope.getPropagationContext();\n          const sentryTraceHeader = generateSentryTraceHeader(traceId, undefined, sampled);\n          const dynamicSamplingContext =\n            dsc || (client ? getDynamicSamplingContextFromClient(traceId, client, scope) : undefined);\n          addHeadersToRequestOptions(requestOptions, requestUrl, sentryTraceHeader, dynamicSamplingContext);\n        }\n      } else {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&\n          logger.log(\n            `[Tracing] Not adding sentry-trace header to outgoing request (${requestUrl}) due to mismatching tracePropagationTargets option.`,\n          );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalRequestMethod\n        .apply(httpModule, requestArgs)\n        .once('response', function ( res) {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const req = this;\n          if (breadcrumbsEnabled) {\n            addRequestBreadcrumb('response', data, req, res);\n          }\n          if (requestSpan) {\n            if (res.statusCode) {\n              requestSpan.setHttpStatus(res.statusCode);\n            }\n            requestSpan.description = cleanSpanDescription(requestSpan.description, requestOptions, req);\n            requestSpan.finish();\n          }\n        })\n        .once('error', function () {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const req = this;\n\n          if (breadcrumbsEnabled) {\n            addRequestBreadcrumb('error', data, req);\n          }\n          if (requestSpan) {\n            requestSpan.setHttpStatus(500);\n            requestSpan.description = cleanSpanDescription(requestSpan.description, requestOptions, req);\n            requestSpan.finish();\n          }\n        });\n    };\n  };\n}\n\nfunction addHeadersToRequestOptions(\n  requestOptions,\n  requestUrl,\n  sentryTraceHeader,\n  dynamicSamplingContext,\n) {\n  // Don't overwrite sentry-trace and baggage header if it's already set.\n  const headers = requestOptions.headers || {};\n  if (headers['sentry-trace']) {\n    return;\n  }\n\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&\n    logger.log(`[Tracing] Adding sentry-trace header ${sentryTraceHeader} to outgoing request to \"${requestUrl}\": `);\n  const sentryBaggage = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n  const sentryBaggageHeader =\n    sentryBaggage && sentryBaggage.length > 0 ? normalizeBaggageHeader(requestOptions, sentryBaggage) : undefined;\n\n  requestOptions.headers = {\n    ...requestOptions.headers,\n    'sentry-trace': sentryTraceHeader,\n    // Setting a header to `undefined` will crash in node so we only set the baggage header when it's defined\n    ...(sentryBaggageHeader && { baggage: sentryBaggageHeader }),\n  };\n}\n\nfunction getRequestSpanData(requestUrl, requestOptions) {\n  const method = requestOptions.method || 'GET';\n  const data = {\n    url: requestUrl,\n    'http.method': method,\n  };\n  if (requestOptions.hash) {\n    // strip leading \"#\"\n    data['http.fragment'] = requestOptions.hash.substring(1);\n  }\n  if (requestOptions.search) {\n    // strip leading \"?\"\n    data['http.query'] = requestOptions.search.substring(1);\n  }\n  return data;\n}\n\nfunction normalizeBaggageHeader(\n  requestOptions,\n  sentryBaggageHeader,\n) {\n  if (!requestOptions.headers || !requestOptions.headers.baggage) {\n    return sentryBaggageHeader;\n  } else if (!sentryBaggageHeader) {\n    return requestOptions.headers.baggage ;\n  } else if (Array.isArray(requestOptions.headers.baggage)) {\n    return [...requestOptions.headers.baggage, sentryBaggageHeader];\n  }\n  // Type-cast explanation:\n  // Technically this the following could be of type `(number | string)[]` but for the sake of simplicity\n  // we say this is undefined behaviour, since it would not be baggage spec conform if the user did this.\n  return [requestOptions.headers.baggage, sentryBaggageHeader] ;\n}\n\nexport { Http };\n//# sourceMappingURL=http.js.map\n"],"names":["_optionalChain","logger","fill","NODE_VERSION","LRUMap","stringMatchesSomePattern","getCurrentHub","normalizeRequestArgs","extractRawUrl","extractUrl","isSentryRequest","hub","dynamicSamplingContext","generateSentryTraceHeader","getDynamicSamplingContextFromClient","cleanSpanDescription","dynamicSamplingContextToSentryBaggageHeader"],"mappings":"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","x_google_ignoreList":[0]}