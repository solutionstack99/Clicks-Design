"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
require("../../../../lru_map/lru.cjs");
const nodeVersion = require("../nodeVersion.cjs");
const lru = require("../../../../../_virtual/lru.cjs");
const _optionalChain = require('./../../_node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.cjs');
const logger = require('./../../_node_modules/@sentry/utils/esm/logger.cjs');
function createCallbackList(complete) {
  let callbacks = [];
  let completedCalled = false;
  function checkedComplete(result) {
    callbacks = [];
    if (completedCalled) {
      return;
    }
    completedCalled = true;
    complete(result);
  }
  callbacks.push(checkedComplete);
  function add(fn) {
    callbacks.push(fn);
  }
  function next(result) {
    const popped = callbacks.pop() || checkedComplete;
    try {
      popped(result);
    } catch (_) {
      checkedComplete(result);
    }
  }
  return { add, next };
}
class AsyncSession {
  /** Throws if inspector API is not available */
  constructor() {
    const { Session } = require("inspector");
    this._session = new Session();
  }
  /** @inheritdoc */
  configureAndConnect(onPause, captureAll) {
    this._session.connect();
    this._session.on("Debugger.paused", (event) => {
      onPause(event, () => {
        this._session.post("Debugger.resume");
      });
    });
    this._session.post("Debugger.enable");
    this._session.post("Debugger.setPauseOnExceptions", { state: captureAll ? "all" : "uncaught" });
  }
  /** @inheritdoc */
  getLocalVariables(objectId, complete) {
    this._getProperties(objectId, (props) => {
      const { add, next } = createCallbackList(complete);
      for (const prop of props) {
        if (_optionalChain._optionalChain([prop, "optionalAccess", (_2) => _2.value, "optionalAccess", (_3) => _3.objectId]) && _optionalChain._optionalChain([prop, "optionalAccess", (_4) => _4.value, "access", (_5) => _5.className]) === "Array") {
          const id = prop.value.objectId;
          add((vars) => this._unrollArray(id, prop.name, vars, next));
        } else if (_optionalChain._optionalChain([prop, "optionalAccess", (_6) => _6.value, "optionalAccess", (_7) => _7.objectId]) && _optionalChain._optionalChain([prop, "optionalAccess", (_8) => _8.value, "optionalAccess", (_9) => _9.className]) === "Object") {
          const id = prop.value.objectId;
          add((vars) => this._unrollObject(id, prop.name, vars, next));
        } else if (_optionalChain._optionalChain([prop, "optionalAccess", (_10) => _10.value, "optionalAccess", (_11) => _11.value]) || _optionalChain._optionalChain([prop, "optionalAccess", (_12) => _12.value, "optionalAccess", (_13) => _13.description])) {
          add((vars) => this._unrollOther(prop, vars, next));
        }
      }
      next({});
    });
  }
  /**
   * Gets all the PropertyDescriptors of an object
   */
  _getProperties(objectId, next) {
    this._session.post(
      "Runtime.getProperties",
      {
        objectId,
        ownProperties: true
      },
      (err, params) => {
        if (err) {
          next([]);
        } else {
          next(params.result);
        }
      }
    );
  }
  /**
   * Unrolls an array property
   */
  _unrollArray(objectId, name, vars, next) {
    this._getProperties(objectId, (props) => {
      vars[name] = props.filter((v) => v.name !== "length" && !isNaN(parseInt(v.name, 10))).sort((a, b) => parseInt(a.name, 10) - parseInt(b.name, 10)).map((v) => _optionalChain._optionalChain([v, "optionalAccess", (_14) => _14.value, "optionalAccess", (_15) => _15.value]));
      next(vars);
    });
  }
  /**
   * Unrolls an object property
   */
  _unrollObject(objectId, name, vars, next) {
    this._getProperties(objectId, (props) => {
      vars[name] = props.map((v) => [v.name, _optionalChain._optionalChain([v, "optionalAccess", (_16) => _16.value, "optionalAccess", (_17) => _17.value])]).reduce((obj, [key, val]) => {
        obj[key] = val;
        return obj;
      }, {});
      next(vars);
    });
  }
  /**
   * Unrolls other properties
   */
  _unrollOther(prop, vars, next) {
    if (_optionalChain._optionalChain([prop, "optionalAccess", (_18) => _18.value, "optionalAccess", (_19) => _19.value])) {
      vars[prop.name] = prop.value.value;
    } else if (_optionalChain._optionalChain([prop, "optionalAccess", (_20) => _20.value, "optionalAccess", (_21) => _21.description]) && _optionalChain._optionalChain([prop, "optionalAccess", (_22) => _22.value, "optionalAccess", (_23) => _23.type]) !== "function") {
      vars[prop.name] = `<${prop.value.description}>`;
    }
    next(vars);
  }
}
function tryNewAsyncSession() {
  try {
    return new AsyncSession();
  } catch (e) {
    return void 0;
  }
}
function isAnonymous(name) {
  return name !== void 0 && ["", "?", "<anonymous>"].includes(name);
}
function functionNamesMatch(a, b) {
  return a === b || isAnonymous(a) && isAnonymous(b);
}
function hashFrames(frames) {
  if (frames === void 0) {
    return;
  }
  return frames.slice(-10).reduce((acc, frame) => `${acc},${frame.function},${frame.lineno},${frame.colno}`, "");
}
function hashFromStack(stackParser, stack) {
  if (stack === void 0) {
    return void 0;
  }
  return hashFrames(stackParser(stack, 1));
}
class LocalVariables {
  static __initStatic() {
    this.id = "LocalVariables";
  }
  __init() {
    this.name = LocalVariables.id;
  }
  __init2() {
    this._cachedFrames = new lru.__exports.LRUMap(20);
  }
  constructor(_options = {}, _session = tryNewAsyncSession()) {
    this._options = _options;
    this._session = _session;
    LocalVariables.prototype.__init.call(this);
    LocalVariables.prototype.__init2.call(this);
  }
  /**
   * @inheritDoc
   */
  setupOnce(addGlobalEventProcessor, getCurrentHub) {
    this._setup(addGlobalEventProcessor, _optionalChain._optionalChain([getCurrentHub, "call", (_24) => _24(), "access", (_25) => _25.getClient, "call", (_26) => _26(), "optionalAccess", (_27) => _27.getOptions, "call", (_28) => _28()]));
  }
  /** Setup in a way that's easier to call from tests */
  _setup(addGlobalEventProcessor, clientOptions) {
    if (this._session && _optionalChain._optionalChain([clientOptions, "optionalAccess", (_29) => _29.includeLocalVariables])) {
      const unsupportedNodeVersion = (nodeVersion.NODE_VERSION.major || 0) < 18;
      if (unsupportedNodeVersion) {
        logger.logger.log("The `LocalVariables` integration is only supported on Node >= v18.");
        return;
      }
      this._session.configureAndConnect(
        (ev, complete) => this._handlePaused(clientOptions.stackParser, ev, complete),
        !!this._options.captureAllExceptions
      );
      addGlobalEventProcessor(async (event) => this._addLocalVariables(event));
    }
  }
  /**
   * Handle the pause event
   */
  _handlePaused(stackParser, { params: { reason, data, callFrames } }, complete) {
    if (reason !== "exception" && reason !== "promiseRejection") {
      complete();
      return;
    }
    const exceptionHash = hashFromStack(stackParser, _optionalChain._optionalChain([data, "optionalAccess", (_30) => _30.description]));
    if (exceptionHash == void 0) {
      complete();
      return;
    }
    const { add, next } = createCallbackList((frames) => {
      this._cachedFrames.set(exceptionHash, frames);
      complete();
    });
    for (let i = 0; i < Math.min(callFrames.length, 5); i++) {
      const { scopeChain, functionName, this: obj } = callFrames[i];
      const localScope = scopeChain.find((scope) => scope.type === "local");
      const fn = obj.className === "global" || !obj.className ? functionName : `${obj.className}.${functionName}`;
      if (_optionalChain._optionalChain([localScope, "optionalAccess", (_31) => _31.object, "access", (_32) => _32.objectId]) === void 0) {
        add((frames) => {
          frames[i] = { function: fn };
          next(frames);
        });
      } else {
        const id = localScope.object.objectId;
        add(
          (frames) => _optionalChain._optionalChain([this, "access", (_33) => _33._session, "optionalAccess", (_34) => _34.getLocalVariables, "call", (_35) => _35(id, (vars) => {
            frames[i] = { function: fn, vars };
            next(frames);
          })])
        );
      }
    }
    next([]);
  }
  /**
   * Adds local variables event stack frames.
   */
  _addLocalVariables(event) {
    for (const exception of _optionalChain._optionalChain([event, "optionalAccess", (_36) => _36.exception, "optionalAccess", (_37) => _37.values]) || []) {
      this._addLocalVariablesToException(exception);
    }
    return event;
  }
  /**
   * Adds local variables to the exception stack frames.
   */
  _addLocalVariablesToException(exception) {
    const hash = hashFrames(_optionalChain._optionalChain([exception, "optionalAccess", (_38) => _38.stacktrace, "optionalAccess", (_39) => _39.frames]));
    if (hash === void 0) {
      return;
    }
    const cachedFrames = this._cachedFrames.delete(hash);
    if (cachedFrames === void 0) {
      return;
    }
    const frameCount = _optionalChain._optionalChain([exception, "access", (_40) => _40.stacktrace, "optionalAccess", (_41) => _41.frames, "optionalAccess", (_42) => _42.length]) || 0;
    for (let i = 0; i < frameCount; i++) {
      const frameIndex = frameCount - i - 1;
      if (!_optionalChain._optionalChain([exception, "optionalAccess", (_43) => _43.stacktrace, "optionalAccess", (_44) => _44.frames, "optionalAccess", (_45) => _45[frameIndex]]) || !cachedFrames[i]) {
        break;
      }
      if (
        // We need to have vars to add
        cachedFrames[i].vars === void 0 || // We're not interested in frames that are not in_app because the vars are not relevant
        exception.stacktrace.frames[frameIndex].in_app === false || // The function names need to match
        !functionNamesMatch(exception.stacktrace.frames[frameIndex].function, cachedFrames[i].function)
      ) {
        continue;
      }
      exception.stacktrace.frames[frameIndex].vars = cachedFrames[i].vars;
    }
  }
}
LocalVariables.__initStatic();
exports.LocalVariables = LocalVariables;
exports.createCallbackList = createCallbackList;
//# sourceMappingURL=localvariables.cjs.map
