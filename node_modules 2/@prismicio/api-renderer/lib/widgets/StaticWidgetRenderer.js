"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const content_1 = require("@prismicio/types-internal/lib/content");
const Array_1 = require("fp-ts/lib/Array");
const O = tslib_1.__importStar(require("fp-ts/lib/Option"));
const fetch_1 = require("../models/fetch");
const utils_1 = require("../utils");
const GroupRenderer_1 = tslib_1.__importDefault(require("./GroupRenderer"));
const SimpleWidgetRenderer_1 = tslib_1.__importDefault(require("./SimpleWidgetRenderer"));
function extractFetchGroupIfAny(fetch) {
    if (fetch !== undefined && fetch.TYPE === fetch_1.GroupType) {
        return fetch;
    }
    else {
        return undefined;
    }
}
function extractFetchFieldIfAny(fetch) {
    if (fetch !== undefined && fetch.TYPE !== fetch_1.GroupType) {
        return fetch;
    }
    else {
        return undefined;
    }
}
const StaticWidgetRenderer = (ctx) => ({
    renderV1(content, fetch) {
        if ((0, content_1.isGroupContent)(content)) {
            return (0, GroupRenderer_1.default)(ctx).renderV1(content, extractFetchGroupIfAny(fetch));
        }
        else {
            return (0, SimpleWidgetRenderer_1.default)(ctx).renderV1(content, extractFetchFieldIfAny(fetch));
        }
    },
    renderV2(def, content, fetch) {
        if (def.type !== "Group" && (0, content_1.isNestableContent)(content)) {
            // todo maybe find an other condition
            return (0, SimpleWidgetRenderer_1.default)(ctx).renderV2(def, content, extractFetchFieldIfAny(fetch));
        }
        else if (def.type === "Group" && (0, content_1.isGroupContent)(content)) {
            return (0, GroupRenderer_1.default)(ctx).renderV2(def, content, extractFetchGroupIfAny(fetch));
        }
        else {
            return this.renderDefault(def);
        }
    },
    renderDefault(def) {
        if (def.type === "Group") {
            return (0, GroupRenderer_1.default)(ctx).renderDefault(def);
        }
        else {
            return (0, SimpleWidgetRenderer_1.default)(ctx).renderDefault(def);
        }
    },
    renderMocks(def, content) {
        if ((0, content_1.isNestableContent)(content) && def.type !== "Group") {
            return (0, SimpleWidgetRenderer_1.default)(ctx).renderMocks(def, content);
        }
        else if ((0, content_1.isGroupContent)(content) && def.type === "Group") {
            return (0, GroupRenderer_1.default)(ctx).renderMocks(def, content);
        }
        else {
            return this.renderDefault(def);
        }
    },
    renderObjectOfStaticWidgetV1(content, fetch) {
        const c = content instanceof Array ? content : Object.entries(content);
        return Object.fromEntries((0, Array_1.compact)(c.map(([key, widget]) => {
            if (content_1.EmptyContent.is(widget)) {
                return O.none;
            }
            return (0, utils_1.renderIfNoFetchOrFetchDefined)(fetch, key, (f) => O.some([key, this.renderV1(widget, f)]));
        })));
    },
    renderObjectOfStaticWidgetV2(content, fetch, fieldsDef, renderIfUndefined, renderIfNull) {
        const itemByKey = content instanceof Array ? Object.fromEntries(content) : content;
        const result = {};
        Object.entries(fieldsDef).forEach(([key, def]) => {
            const item = itemByKey[key];
            if (item === undefined) {
                if ((fetch && key in fetch) || !fetch) {
                    result[key] = this.renderDefault(def);
                }
                else if (fetch) {
                    if (renderIfUndefined.withFetch === "default") {
                        result[key] = this.renderDefault(def);
                    }
                }
            }
            else if (content_1.EmptyContent.is(item)) {
                if (fetch && key in fetch) {
                    if (renderIfNull.withFetchField === "default") {
                        result[key] = this.renderDefault(def);
                    }
                    else if (renderIfNull.withFetchField === "render") {
                        result[key] = this.renderV2(def, item, fetch[key]);
                    }
                }
                else if (fetch) {
                    if (renderIfNull.withFetch === "default") {
                        result[key] = this.renderDefault(def);
                    }
                }
                else {
                    if (renderIfNull.default === "default") {
                        result[key] = this.renderDefault(def);
                    }
                    else if (renderIfNull.default === "render") {
                        result[key] = this.renderV2(def, item);
                    }
                }
            }
            else {
                const renderedO = (0, utils_1.renderIfNoFetchOrFetchDefined)(fetch, key, (f) => O.some(this.renderV2(def, item, f)));
                if (O.isSome(renderedO)) {
                    result[key] = renderedO.value;
                }
            }
        });
        return result;
    },
    renderObjectOfStaticWidgetMocks(content, fieldsDef) {
        const itemByKey = content instanceof Array ? Object.fromEntries(content) : content;
        const result = {};
        Object.entries(fieldsDef).forEach(([name, def]) => {
            const key = name;
            const item = itemByKey[key];
            if (item === undefined) {
                result[key] = this.renderDefault(def);
            }
            else if (content_1.EmptyContent.is(item)) {
                result[key] = this.renderDefault(def);
            }
            else {
                const renderedO = (0, utils_1.renderIfNoFetchOrFetchDefined)(undefined, key, () => O.some(this.renderMocks(def, item)));
                if (O.isSome(renderedO)) {
                    result[key] = renderedO.value;
                }
            }
        });
        return result;
    },
});
exports.default = StaticWidgetRenderer;
