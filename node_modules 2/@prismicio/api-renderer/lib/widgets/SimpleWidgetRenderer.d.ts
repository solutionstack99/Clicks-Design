import { NestableContent } from "@prismicio/types-internal/lib/content";
import type { NestableWidget } from "@prismicio/types-internal/lib/customtypes";
import type { RenderContext } from "../models";
import type { Renderer } from "../models";
import { Field } from "../models/fetch";
declare const SimpleWidgetRenderer: (ctx: RenderContext) => Renderer<NestableWidget, NestableContent, Field> & {
    renderObjectOfSimpleWidgetV1(content: Array<[string, NestableContent]> | Record<string, NestableContent>, fetch: Record<string, Field> | undefined): object;
    renderObjectOfSimpleWidgetV2(content: Array<[string, NestableContent]> | Record<string, NestableContent>, fetch: Record<string, Field> | undefined, fieldsDef: Record<string, NestableWidget>, renderIfUndefined: {
        withFetch: "default" | "filter";
    }, renderIfNull: {
        default: "default" | "render" | "filter";
        withFetch: "default" | "filter";
        withFetchField: "default" | "render" | "filter";
    }): Record<string, unknown>;
    renderObjectOfSimpleWidgetMocks(content: Array<[string, NestableContent]> | Record<string, NestableContent>, fieldsDef: Record<string, NestableWidget>): Record<string, unknown>;
};
export default SimpleWidgetRenderer;
