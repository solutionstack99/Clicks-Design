import { Group } from "@prismicio/types-internal/lib/customtypes"
import { either } from "fp-ts"
import { pipe } from "fp-ts/lib/function"
import * as t from "io-ts"

import { isFieldDef, WithKey } from "../utils"
import { NestableDef } from "./nestable/NestableDef"

const GroupDefType = "Group"

const codec = t.strict({
	name: t.string,
	fields: t.array(NestableDef),
})

export const GroupDef = new t.Type<WithKey<Group>>(
	"GroupDef",
	(u: unknown): u is WithKey<Group> => isFieldDef(u) && Group.is(u.def),
	(u: unknown) => {
		return pipe(
			codec.decode(u),
			either.map(
				({ name, fields }): WithKey<Group> => ({
					key: name,
					def: {
						type: GroupDefType,
						config: {
							fields: fields.reduce((acc, field) => ({ ...acc, [field.key]: field.def }), {}),
						},
					},
				}),
			),
		)
	},
	(n) => n,
)
