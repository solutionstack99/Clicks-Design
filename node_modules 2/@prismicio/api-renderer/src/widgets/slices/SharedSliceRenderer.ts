import type { SharedSliceContent } from "@prismicio/types-internal/lib/content"
import type { SharedSlice as SharedSliceDef, Variation } from "@prismicio/types-internal/lib/customtypes"

import type { RenderContext } from "../../models"
import type { Field, GroupOrField, SharedSlice } from "../../models/fetch"
import type { SliceRenderer } from "../../models/Renderer"
import SimpleWidgetRenderer from "../SimpleWidgetRenderer"
import StaticWidgetRenderer from "../StaticWidgetRenderer"

type FetchField<Part extends "repeat" | "nonRepeat"> = Record<string, Part extends "nonRepeat" ? GroupOrField : Field>

function getFetchField<Part extends "repeat" | "nonRepeat">(
	variation: string,
	part: Part,
	fetch: SharedSlice | undefined,
): FetchField<Part> | undefined {
	return fetch?.variations?.[variation]?.[part]?.fields as FetchField<Part> | undefined
}

const SharedSliceRenderer: (ctx: RenderContext) => SliceRenderer<SharedSliceDef, SharedSliceContent, SharedSlice> = (
	ctx,
) => ({
	renderV1(content: SharedSliceContent, fetch: SharedSlice | undefined): unknown {
		const itemsValue = content.items.map((groupItem) => {
			return SimpleWidgetRenderer(ctx).renderObjectOfSimpleWidgetV1(
				groupItem.value,
				getFetchField(content.variation, "repeat", fetch),
			)
		})
		const primaryValue = StaticWidgetRenderer(ctx).renderObjectOfStaticWidgetV1(
			content.primary,
			getFetchField(content.variation, "nonRepeat", fetch),
		)
		return {
			variation: content.variation,
			items: itemsValue,
			primary: primaryValue,
		}
	},

	renderV2(def: SharedSliceDef, content: SharedSliceContent, fetch: SharedSlice | undefined): unknown {
		const variation = def.variations.find((variation: Variation) => variation.id === content.variation)
		if (variation === undefined) {
			return this.renderDefault(def)
		}

		const itemsValue = content.items.map((groupItem) => {
			return SimpleWidgetRenderer(ctx).renderObjectOfSimpleWidgetV2(
				groupItem.value,
				getFetchField(content.variation, "repeat", fetch),
				variation.items || {},
				{
					withFetch: "filter",
				},
				{
					default: "default",
					withFetch: "filter",
					withFetchField: "render",
				},
			)
		})
		const primaryValue = StaticWidgetRenderer(ctx).renderObjectOfStaticWidgetV2(
			content.primary,
			getFetchField(content.variation, "nonRepeat", fetch),
			variation.primary || {},
			{
				withFetch: "filter",
			},
			{
				default: "default",
				withFetch: "filter",
				withFetchField: "render",
			},
		)

		return {
			variation: content.variation,
			version: variation.version,
			items: itemsValue,
			primary: primaryValue,
		}
	},

	renderDefault(_def: SharedSliceDef): unknown {
		return {}
	},

	renderMocks(def: SharedSliceDef, content: SharedSliceContent): unknown {
		const variation = def.variations.find((variation: Variation) => variation.id === content.variation)
		if (variation === undefined) {
			return this.renderDefault(def)
		}

		const itemsValue = content.items.map((groupItem) => {
			return SimpleWidgetRenderer(ctx).renderObjectOfSimpleWidgetMocks(groupItem.value, variation.items || {})
		})
		const primaryValue = StaticWidgetRenderer(ctx).renderObjectOfStaticWidgetMocks(
			content.primary,
			variation.primary || {},
		)

		return {
			variation: content.variation,
			version: variation.version,
			items: itemsValue,
			primary: primaryValue,
		}
	},
})

export default SharedSliceRenderer
